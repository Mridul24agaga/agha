{
  "initialUrl": "https://transcript.study/",
  "initialResearchSummary": "Absolutely, let's dive into the content you've provided about SQL subqueries from SQLTutorial.org. \n\n### Overview of the Website\n\nSQLTutorial.org serves as a comprehensive resource for anyone looking to learn or master SQL (Structured Query Language). The site is structured to offer a variety of tutorials that simplify complex SQL concepts through practical examples and clear explanations. It's a hub for both beginners and experienced users who aim to enhance their SQL skills. \n\n### Focus on SQL Subqueries\n\nThe highlighted content specifically focuses on SQL subqueries, which are an essential feature of SQL that allows users to nest one query within another. This functionality enables more flexible and powerful data retrieval from databases. The site's tutorial aims to teach users how to effectively use subqueries to enhance their SQL querying ability.\n\n### Key Takeaways from the Subquery Tutorial\n\n#### What is a Subquery?\n\nA subquery, also known as a nested query, is essentially a query within another query. The outer query is referred to as the \"outer query,\" while the inner query is known as the \"subquery.\" The tutorial emphasizes that a strong grasp of the SELECT statement is crucial for effectively working with subqueries. The basic structure of a query with a subquery can look something like this:\n\n```\nSELECT select_list \nFROM table1 \nINNER JOIN table2 ON join_condition \nWHERE filter_condition;\n```\n\n#### Types of Subqueries\n\n1. **Subquery in the WHERE Clause**: \n   The tutorial illustrates how subqueries can be used to filter results based on specific conditions. For example, it shows how to find employees with the highest salary:\n\n   ```sql\n   SELECT first_name, salary \n   FROM employees \n   WHERE salary = (SELECT MAX(salary) FROM employees);\n   ```\n\n   In this example, the inner query retrieves the maximum salary, and the outer query uses that value to find the corresponding employee.\n\n2. **Subquery with the IN Operator**: \n   The IN operator allows you to filter results based on a set of values returned by a subquery. An example provided in the tutorial is:\n\n   ```sql\n   SELECT first_name, last_name \n   FROM employees \n   WHERE job_id IN (SELECT job_id FROM jobs WHERE job_title LIKE '%Sales%');\n   ```\n\n   Here, the subquery finds job IDs related to sales, and the outer query retrieves the employees with those job IDs.\n\n3. **Subquery in the SELECT Clause**: \n   This allows you to retrieve additional data alongside your main query's results. The tutorial gives an example:\n\n   ```sql\n   SELECT first_name, salary, \n          (SELECT ROUND(AVG(salary), 2) FROM employees) AS average_salary \n   FROM employees \n   ORDER BY salary;\n   ```\n\n   This query fetches each employee's name and salary alongside the average salary.\n\n4. **Subquery in the FROM Clause**: \n   This usage is a bit more advanced. The tutorial presents the following query:\n\n   ```sql\n   SELECT ROUND(AVG(department_salary), 0) AS average_department_salary \n   FROM (SELECT department_id, SUM(salary) AS department_salary \n         FROM employees GROUP BY department_id);\n   ```\n\n   In this case, a subquery computes the total salary per department, which the outer query then uses to calculate the average salary across departments.\n\n5. **Subquery in the INNER JOIN Clause**: \n   The tutorial also illustrates how you can use a subquery in a JOIN context:\n\n   ```sql\n   SELECT first_name, last_name, salary, s.avg_salary \n   FROM employees e \n   INNER JOIN (SELECT ROUND(AVG(salary), 0) AS avg_salary FROM employees) s \n   ON e.salary > s.avg_salary \n   ORDER BY salary;\n   ```\n\n   This query joins the employees with the average salary, filtering out those who earn above that average.\n\n#### Summary and Importance of Subqueries\n\nThe tutorial finishes with a concise summary reiterating that subqueries can be embedded in several clauses of a query, specifically SELECT, FROM, WHERE, and INNER JOIN. This capability allows for robust data manipulation and retrieval strategies.\n\n### Additional Resources and Features\n\nBeyond just subqueries, SQLTutorial.org offers a wealth of resources concerning SQL syntax, data selection, filtering, joining tables, and managing databases. Each tutorial contains practical examples that help users understand how to implement different SQL functions effectively.\n\n#### Related Topics\n\nThe site also covers a variety of related topics, including:\n- SQL Aggregate Functions (like AVG, COUNT, MAX, etc.)\n- Various types of SQL joins (INNER JOIN, LEFT JOIN, etc.)\n- Functions and expressions in SQL, such as CASE, COALESCE, and NULLIF operations.\n  \nThere are also quizzes and sections dedicated to specific SQL databases like PostgreSQL, MySQL, SQLite, Db2, Oracle, and SQL Server, indicating a broader focus on learning SQL across different platforms.\n\n### Concluding Thoughts\n\nIn summary, SQLTutorial.org is a valuable resource for anyone looking to deepen their understanding of SQL, particularly through the lens of subqueries. The site breaks down complex concepts into manageable, clear lessons, making it easier for learners to grasp the nuances of SQL. \n\nBy focusing on practical examples and real-world applications, SQLTutorial.org ensures that users can not only learn about SQL subqueries but also apply that knowledge effectively in their database management tasks. Whether you're just starting or looking to refine your SQL skills, this site serves as an excellent educational tool.",
  "researchResults": [
    {
      "url": "https://www.sqlservercentral.com/blogs/master-sql-subqueries-with-this-free-course",
      "content": "Master SQL Subqueries with This Free Course – SQLServerCentral Articles Editorials Stairways Forums Forums home Active threads Latest topics Most popular Leaderboard * Scripts * QotD * Books * Blogs Register Login Write for us Menu Articles Editorials Stairways Forums Forums home Active threads Latest topics Most popular Leaderboard * Scripts * QotD * Books * Blogs * Write for us * Register * Login Master SQL Subqueries with This Free Course Tracy McKibben, 2025-01-10 Want to boost your SQL game? Check out this free course, SQL Subqueries: Real-World Exercises for All Levels. It covers subqueries – a must-have tool for any SQL pro. Subqueries unlock advanced data analysis and problem-solving, and this course makes it easy to get started. Think of subqueries as SQL's secret weapon. They let you embed the results of one query into another. Instead of writing multiple queries and manually connecting the dots, a subquery nests the data seamlessly. This makes your code faster, cleaner, and easier to understand. Mastering subqueries makes your SQL more efficient. You'll be able to answer complex business questions in fewer steps. This free SQL course will help you improve your skills, analyze data, and organize your code. Here's how to grab your free SQL Subqueries course this January: Create a free account or log in if you already have one. Start the course. You have free access to its content until the end of the month. Why Is This Subqueries Course Free? This platform offers one free SQL course every month, their \"Course of the Month.\" It's their way of helping anyone learn SQL, no matter their budget. Tons of people have already benefited – why not you? This is your chance to explore their courses without any risk. If you want to check out their teaching style and content, go for it! See if it works for you. Why You Should Learn Subqueries Subqueries make your SQL code cleaner and more efficient. Need to filter data based on calculations or cross-reference information between tables? Subqueries let you do it all in a straightforward way. Instead of writing multiple queries and piecing the results together, you can simplify everything into one clean command. This saves time and makes your code easier to read and maintain. Learning subqueries helps you write SQL that handles complex tasks better – whether it's summarizing data, comparing data, or answering business questions that require multiple steps. SQL subqueries empower you to solve complex problems with one efficient command, streamline your workflow, and do more with less. What Will You Learn in This Course? With 82 interactive and hands-on exercises, you'll learn the ins and outs of SQL subqueries. You'll understand how to make your queries more efficient and dynamic, enabling you to answer complex questions like finding top-performing products or identifying customers with unusual behavior. Many students who took this course significantly improved their data analysis skills and made better data-driven decisions. You'll also learn how to use subqueries to cross-reference tables, filter data based on complex conditions, and simplify multi-step calculations into a single query. Plus, you'll discover some useful SQL tricks to make your data analysis smoother, more insightful, and more enjoyable! Here's the breakdown: Basic subqueries: Learn the essentials of subqueries and how to use them in SELECT, WHERE, and FROM clauses. Correlated subqueries: Master correlated subqueries that make your filtering more dynamic by referencing columns from the outer query. Nested subqueries: Practice combining multiple subqueries to make your SQL even more powerful. Real-Life applications: Apply subqueries to filter data, summarize info, and solve real-world data challenges. This course goes beyond theory and dives into real-world applications. If you're serious about learning SQL, this is a great resource to build your skills and go deeper. Who is This Course For? Whether you're new to SQL or have some experience, this free SQL course will help you improve. Data analysts, aspiring analysts, and anyone who works with databases will benefit from learning subqueries. If you know basic SQL, this course will take you to the next level. You'll learn to write more advanced queries. Learning subqueries will also help you manipulate and analyze data more effectively, making your work easier and more impactful. Free SQL Course for January: Master Subqueries with Real-World Exercises Learning SQL subqueries is a game-changer if you work with data. This skill elevates your SQL from basic to advanced, allowing you to write dynamic queries that get you answers fast. It's not just about learning syntax; it's about applying subqueries to streamline your analysis, answer detailed business questions, and improve decision-making. This month, you can get free access to the SQL Subqueries course, which includes real-world exercises for all skill levels. No strings attached, no credit card needed—just sign up and start learning! This is the perfect opportunity for both beginners and experienced SQL users to sharpen their skills with subqueries and see how this tool can enhance their data work, without any financial commitment. Ready to take your SQL skills further and learn practical subquery techniques? Sign up today and get started! The post Master SQL Subqueries with This Free Course appeared first on RealSQLGuy. Original post (opens in new tab) View comments in original post (opens in new tab) Read 131 times (5 in last 30 days) Rate ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ Log in or register to rate You rated this post out of 5. Change rating Share Share Rate ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ Log in or register to rate You rated this post out of 5. Change rating About SQLServerCentral Contact Us Terms of Use Privacy Policy Contribute Contributors Authors Newsletters Cookies on SQLServerCentral This website stores cookies on your computer. These cookies are used to improve your website experience and provide more personalized services to you, both on this website and through other media. To find out more about the cookies we use, see our Privacy Policy Accept additional cookies Reject additional cookies Customize additional cookies",
      "title": "https://www.sqlservercentral.com/blogs/master-sql-subqueries-with-this-free-course"
    },
    {
      "url": "https://learnsql.com/blog/best-online-sql-courses/",
      "content": "SQL Courses Online Learn SQL for managing databases. Understand how to write queries, manage data, and optimize database performance. Filter by SubjectRequiredâ* LanguageRequiredâ* The language used throughout the course, in both instruction and assessments. Learning ProductRequiredâ* LevelRequiredâ* DurationRequiredâ* SkillsRequiredâ* SubtitlesRequiredâ* EducatorRequiredâ* Explore the SQL Course Catalog IBM Databases and SQL for Data Science with Python Skills you'll gain: SQL, Databases, Stored Procedure, Relational Databases, Database Design, Query Languages, Database Management, Data Analysis, Jupyter, Data Manipulation, Pandas (Python Package), Transaction Processing Beginner Â· Course Â· 1 - 3 Months IBM SQL: A Practical Introduction for Querying Databases Skills you'll gain: SQL, Stored Procedure, Relational Databases, MySQL, Microsoft SQL Servers, Query Languages, Database Management, Databases, Cloud Management, IBM DB2, Data Manipulation, Data Analysis, Transaction Processing Beginner Â· Course Â· 1 - 3 Months IBM IBM Business Analyst Skills you'll gain: Data Storytelling, Requirements Elicitation, Business Process Modeling, Business Analysis, Data Presentation, Process Analysis, Resource Allocation, Data Visualization, Interactive Data Visualization, Stakeholder Management, Process Optimization, Business Requirements, Requirements Management, Data Modeling, Risk Analysis, Requirements Analysis, Excel Formulas, Microsoft Excel, Data Cleansing, Analysis Beginner Â· Professional Certificate Â· 3 - 6 Months DeepLearning.AI DeepLearning.AI Data Analytics Beginner Â· Professional Certificate Â· 3 - 6 Months Google Google Data Analytics Skills you'll gain: Data Storytelling, Data Visualization, Data Presentation, Data Ethics, Rmarkdown, Interactive Data Visualization, Interviewing Skills, Data Cleansing, Data Validation, Ggplot2, Tableau Software, Presentations, Spreadsheet Software, Data Analysis, Data Visualization Software, Stakeholder Communications, Dashboard, Sampling (Statistics), Analytics, Stakeholder Management Build toward a degree Beginner Â· Professional Certificate Â· 3 - 6 Months University of California, Davis Learn SQL Basics for Data Science Skills you'll gain: Data Governance, Presentations, Feature Engineering, A/B Testing, Data Cleansing, SQL, Apache Spark, Distributed Computing, Descriptive Statistics, Data Lakes, Data Storytelling, Peer Review, Exploratory Data Analysis, Data Quality, Data Pipelines, Databricks, JSON, Statistical Analysis, Query Languages, Data Manipulation Beginner Â· Specialization Â· 3 - 6 Months University of California, Davis SQL for Data Science Skills you'll gain: Data Governance, SQL, Data Quality, Query Languages, Data Manipulation, Data Modeling, Relational Databases, Data Science, Data Analysis, Database Management Systems, Descriptive Statistics Beginner Â· Course Â· 1 - 4 Weeks Microsoft Microsoft Power BI Data Analyst Skills you'll gain: Data Storytelling, Dashboard, Excel Formulas, Extract, Transform, Load, Power BI, Data Analysis Expressions (DAX), Microsoft Excel, Data Modeling, Data-Driven Decision-Making, Star Schema, Data Analysis, Data Presentation, Data Visualization Software, Microsoft Power Platform, Data Integrity, Spreadsheet Software, Data Validation, Data Transformation, Data Cleansing, Data Visualization Build toward a degree Beginner Â· Professional Certificate Â· 3 - 6 Months University of Michigan Introduction to Structured Query Language (SQL) Skills you'll gain: Database Design, SQL, MySQL, Relational Databases, Database Management, Databases, Data Modeling, Data Integrity, Development Environment, Software Installation Intermediate Â· Course Â· 1 - 4 Weeks Coursera Project Network Understanding Basic SQL Syntax Skills you'll gain: SQL, Query Languages, Data Access, Relational Databases, Data Manipulation Beginner Â· Guided Project Â· Less Than 2 Hours IBM Data Science Fundamentals with Python and SQL Skills you'll gain: Dashboard, SQL, Descriptive Statistics, Jupyter, Statistical Analysis, Data Analysis, Probability Distribution, Pandas (Python Package), Data Visualization Software, Statistics, Data Visualization, Databases, Stored Procedure, Web Scraping, Relational Databases, R Programming, Automation, Computer Programming Tools, GitHub, Python Programming Build toward a degree Beginner Â· Specialization Â· 3 - 6 Months Meta Introduction to Databases Skills you'll gain: Database Design, Database Management Systems, SQL, Database Theory, Relational Databases, Databases, MySQL, Data Integrity, Query Languages, NoSQL, Data Manipulation Beginner Â· Course Â· 1 - 3 Months SQL learners also search In summary, here are 10 of our most popular sql courses Skills you can learn in Data Analysis Frequently Asked Questions about Sql What skills can I learn from SQL courses on Coursera?â Courseraâs SQL courses equip learners with crucial database management and querying skills: Do I need prior experience with databases to start learning SQL on Coursera?â SQL courses on Coursera are designed to accommodate all learners, regardless of their background: What certifications and credentials can I earn through SQL courses on Coursera?â After completing SQL courses on Coursera, learners can acquire credentials that may help in their career progression: What career opportunities can be pursued with skills in SQL?â SQL skills are highly sought after in various fields: How can I purchase SQL training courses for my team?â Looking to enhance your team's SQL skills? Coursera provides tailored enterprise solutions for teams ranging of 5-125 employees. Our offerings include advanced analytics, customized learning paths, and collaborative tools. To explore our SQL training options and make a purchase, please visit our Coursera for Teams page.â Other topics to explore Coursera Footer Technical Skills Analytical Skills Business Skills Career Resources Coursera Community More",
      "title": "https://learnsql.com/blog/best-online-sql-courses/"
    },
    {
      "url": "https://medium.com/learning-sql/mastering-subqueries-in-sql-a-comprehensive-guide-cc584de5128a",
      "content": "Published Time: 2024-05-15T17:49:01.963Z Mastering Subqueries in SQL: A Comprehensive Guide | by Karan | Learning SQL | Medium Open in app Sign up Sign in Write Sign up Sign in HomeLibrary StoriesStats Learning SQL ---------------- HomeAbout ·Follow publication Focused on helping you learn SQL Follow publication Mastering Subqueries in SQL: A Comprehensive Guide Karan ·Follow Published in Learning SQL · 5 min read · May 15, 2024 23 Listen Share Photo by The Dark Queen on Unsplash Structured Query Language (SQL) is a powerful tool for managing and manipulating relational databases. One of the most advanced and versatile features of SQL is the subquery. Subqueries, also known as nested queries or inner queries, allow you to use the result of one query as the input for another query. Mastering subqueries can significantly enhance your ability to write complex and efficient SQL queries. In this guide, we’ll explore what subqueries are, how they work, and how you can master them to become a proficient SQL developer. Understanding Subqueries: A subquery is a query nested within another SQL statement, such as SELECT, INSERT, UPDATE, or DELETE. Subqueries can be used in various parts of a SQL statement, including the SELECT clause, WHERE clause, FROM clause, and HAVING clause. The result of a subquery is treated as a temporary table or dataset that can be used by the outer query. Types of Subqueries There are several types of subqueries, each serving different purposes: 1. Single-Row Subqueries: These subqueries return only one row of data and are typically used with comparison operators like =, , etc. Example: Suppose we have a database with a table of employees and another table of departments. We want to find the department name of the employee with the highest salary. SELECT department_name FROM departments WHERE department_id \\= ( SELECT department_id FROM employees ORDER BY salary DESC LIMIT 1 ); 2. Multiple-Row Subqueries: These subqueries return multiple rows of data and are often used with set operators like IN, ANY, ALL, EXISTS, etc. Example: Suppose we want to find all employees who work in departments located in specific cities. SELECT * FROM employees WHERE department_id IN ( SELECT department_id FROM departments WHERE city IN ('New York', 'Los Angeles') ); 3. Correlated Subqueries: In correlated subqueries, the inner query depends on the outer query, and the inner query is executed for each row processed by the outer query. Example: Suppose we want to find all employees who earn a salary greater than the average salary in their department. SELECT * FROM employees e WHERE salary > ( SELECT AVG(salary) FROM employees WHERE department_id \\= e.department_id ); 4. Nested Subqueries: Nested subqueries contain multiple levels of nesting, where one subquery is nested within another subquery. Example: Suppose we want to find all employees who work in departments with the highest average salary among all departments. SELECT * FROM employees WHERE department_id \\= ( SELECT department_id FROM departments WHERE AVG(salary) \\= ( SELECT MAX(avg_salary) FROM ( SELECT AVG(salary) AS avg_salary FROM employees GROUP BY department_id ) AS department_avg_salaries ) ); Best Practices for Mastering Subqueries in SQL: Explained and Illustrated Photo by Brett Jordan on Unsplash Subqueries in SQL are a powerful tool for extracting, manipulating, and analyzing data from relational databases. Mastering subqueries requires not only understanding their syntax but also applying best practices to ensure efficient and effective query writing. Let’s delve deeper into each of the best practices outlined: 1. Understand the Logic: Before diving into writing subqueries, it’s crucial to have a clear understanding of the logic and purpose of the query. Break down the problem into smaller steps and identify where subqueries can be useful. Example: Suppose we have a database containing tables for employees and departments. We want to find the names of employees who work in the same department as employee “John Smith.” -- Identify John Smith's department SELECT department_id FROM employees WHERE name \\= 'John Smith'; This subquery identifies the department ID of “John Smith” based on his name. 2. Start Simple: Begin with simple subqueries and gradually increase complexity as you become more comfortable. Practice writing basic single-row and multiple-row subqueries to understand their syntax and behavior. Example: Let’s say we want to find all employees who have a salary greater than the average salary. -- Simple single-row subquery SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees); This single-row subquery calculates the average salary and compares it with each employee’s salary. 3. Optimize Performance: Subqueries can impact query performance, especially if they are nested or correlated. Optimize performance by ensuring that subqueries are well-written, properly indexed, and avoid unnecessary repetition of calculations. Example: Consider a scenario where we want to find all employees who have a salary greater than the average salary in their department. -- Correlated subquery with optimization SELECT * FROM employees e WHERE salary > ( SELECT AVG(salary) FROM employees WHERE department_id \\= e.department_id ); By correlating the subquery with the outer query on the department ID, we ensure that the subquery is optimized for the specific department. 4. Use Correlated Subqueries Wisely: While correlated subqueries can be powerful, they can also lead to performance issues if not used judiciously. Limit their use and consider alternative approaches such as JOINs or window functions where applicable. Example: Let’s rewrite the previous example using a JOIN instead of a correlated subquery. -- Alternative with JOIN SELECT e.* FROM employees e JOIN ( SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id ) AS avg_salaries ON e.department_id = avg_salaries.department_id WHERE e.salary > avg_salaries.avg_salary; This query achieves the same result as the correlated subquery but may be more efficient in certain scenarios. 5. Test and Debug: Test your subqueries thoroughly to ensure they return the expected results. Use sample data and test cases to validate the accuracy and efficiency of your queries. Debug any errors or unexpected outcomes by analyzing the logic of your subqueries. Example: Create a set of test data and run your subqueries against it to verify their correctness. If discrepancies arise, carefully examine the logic of your subqueries and identify any potential issues. 6. Leverage Documentation and Resources: Take advantage of SQL documentation, tutorials, and online resources to deepen your understanding of subqueries. Learn from examples and practice implementing different types of subqueries in various scenarios. Example: Explore SQL tutorials, forums, and documentation to learn about advanced subquery techniques, optimization strategies, and real-world use cases. Experiment with different types of subqueries and analyze their performance and effectiveness. Conclusion: Mastering subqueries in SQL is essential for writing efficient, scalable, and powerful database queries. By understanding the types of subqueries, following best practices, and gaining practical experience, you can become proficient in leveraging subqueries to extract, manipulate, and analyze data from relational databases. With practice and perseverance, you can elevate your SQL skills and become a more effective SQL developer or data analyst. Sign up to discover human stories that deepen your understanding of the world. Free Distraction-free reading. No ads. Organize your knowledge with lists and highlights. Tell your story. Find your audience. Sign up for free Membership Read member-only stories Support writers you read most Earn money for your writing Listen to audio narrations Read offline with the Medium app Try for $5/month Sql Problem Solving Programming Sql Queries Subquery 23 23 Follow Published in Learning SQL ------------------------- 2.5K Followers ·Last published Feb 23, 2025 Focused on helping you learn SQL Follow Follow Written by Karan ---------------- 33 Followers ·4 Following Senior Software Developer, Tech Geek and little bit of everything. I am here just to help others Follow No responses yet Write a response What are your thoughts? Cancel Respond Also publish to my profile More from Karan and Learning SQL In Learning SQL by Karan Master “Normalization” in SQL ----------------------------- ### Normalization is a critical concept in database management, particularly in SQL (Structured Query Language), where it ensures the… May 13, 2024 42 In Learning SQL by Sarang S. Babu 12 Tips for Optimizing SQL Queries for Faster Performance --------------------------------------------------------- ### Ways to Optimize SQL Queries Mar 6, 2023 168 5 In Learning SQL by Zach Quinn 4 BigQuery Metadata SQL Queries To Save You Time, Money & Sanity ---------------------------------------------------------------- ### Never write another schema, save on storage costs and more. Feb 27, 2023 308 4 In Learning SQL by Karan SQL Cheat Sheet --------------- ### Learn SQL in one shot Jun 19, 2024 81 2 See all from Karan See all from Learning SQL Recommended from Medium NIRAJAN JHA Most Asked SQL Queries ---------------------- ### Structured Query Language (SQL) is the backbone of database management and is widely used for querying, updating, and managing relational… 4d ago 10 Rituraj Temp Tables vs. Table Variables vs. CTEs: Which One Should You Really Use? -------------------------------------------------------------------------- ### If you’ve ever worked on a SQL Server project with complex queries, you’ve probably faced this dilemma: Should I use a temp table, a table… Mar 11 104 DotNet Full Stack Dev Indexing in SQL: What’s Really Happening Under the Hood? -------------------------------------------------------- ### Let’s deep dive into 10,000 more feet beyond the surface… Oct 9, 2024 In CodeX by Tripathi Aditya Prakash Data Cleaning with SQL Told by a Full-Time Data Analyst ------------------------------------------------------- ### Data cleaning is one of the most essential steps in any data analysis project. It’s the process of preparing raw data for analysis by… Dec 9, 2024 19 JOKEN VILLANUEVA MySQL Insert, Multiple Insert, and Last Inserted Query in PHP ------------------------------------------------------------- ### MySQL Insert Oct 11, 2024 6 In Coding Beauty by Tari Ibaba This new IDE from Google is an absolute game changer ---------------------------------------------------- ### This new IDE from Google is seriously revolutionary. Mar 11 1.6K 103 See more recommendations Help Status About Careers Press Blog Privacy Terms Text to speech Teams",
      "title": "https://medium.com/learning-sql/mastering-subqueries-in-sql-a-comprehensive-guide-cc584de5128a"
    },
    {
      "url": "https://www.sqlrevisited.com/2024/01/top-10-websites-to-learn-sql-for-free.html",
      "content": "Sign up Sign in Sign up Sign in Home Library Stories Stats Javarevisited Home Newsletter About A humble place to learn Java and Programming better. 10 Best Places to Learn SQL Online for FREE My favorite websites to learn SQL Query and Database fundamentals online like SQLZoo, SQLBolt, Khan Academy and Udemy javinpaul Follow Javarevisited -- 5 Listen Share Hello guys, if you want to learn SQL in depth and are looking for the best free resources like websites, books, and online courses, you have come to the right place. Earlier, I have shared the best free SQL courses and books, and in this article, I will share the best websites and places where you can learn SQL online for me. SQL is one of the most important skills for any programmer, be it a Java, C++, Python, JavaScript, or Ruby developer. Almost 95% of the Java applications use a relational database in their back-end, and almost all web applications use the database. In recent years, one of the most common ways to learn any programming skill is online, at your comfort of the office or home, and SQL is no different. Learning SQL online has another advantage of a quick head start because you don’t need to install a database and create tables to write some SELECT queries. The installation and setup are definitely a tough part for beginners, and I have gone through that pain every time I have to learn a new database. Anyway, once you start writing queries and seeing the result, you feel that confidence is needed to go to the next level, which involves downloading and installing a free copy of popular databases like MySQL, SQL Server, PostgreSQL, or Oracle in your machine. From my experience, I can say that SQL is easy to learn but difficult to master. You can start writing SQL queries in about an hour or so, but when it comes to writing queries to solve real-time requirements or reporting purposes, it’s not that easy. Practicing SQL online on sites like SQLZoo or SQLFiddle will further help you keep yourself up-to-date and improve your SQL skills, which is the main challenge for any SQL developer or programmer. 10 Best Websites to Learn SQL Online for FREE Here is my collection of the top five websites, which I found good to learn and master SQL. There are many websites, blogs, and tutorials out there on the internet, but at the same time, it’s difficult to find excellent resources. Since I have a passion for collecting good resources for learning technology, I always bookmark my great discoveries. These websites are some of those, while some are quite common, like Udemy and Coursera, others like SQLZoo and SQLBolt are real gems. 1. Udemy This website has the biggest collection of online courses, both free and paid. Since online courses are a great way to learn a new technology or programming language, you can also learn the basics of SQL and Databases. Finding the right course is a tough job there as well because there are literally so many courses, and you are not sure which instructor is best and which course meets your requirements, so you need to watch previews, read reviews, and decide based upon that. If you ask me, The Complete SQL Bootcamp by Josh Portilla is the best course to learn SQL. It has, on average, 4.5 ratings from more than 127,000 students, which are really impressive. The only thing is that it’s not free, but you can get it really cheap, like in less than $10 on Udemy’s flash sale, which happens all the time. The course also provides certificates to indicate that you have completed the SQL training, adding to your resume or Linkedin profile. As I have said, Udemy also has many free courses to learn SQL and Database, and the following are my recommendations to start with. These are some excellent free courses you can take on Udemy to learn SQL and Database fundamentals, querying, etc. Though you need to be careful that these courses may not remain free all the time and may be converted into paid courses once the instructor reaches their promotional targets. But, once you join, it will be free to you all the time. So, it’s better to join them before they become paid courses and learn at a time convenient to you. 2. Coursera Coursera is another place where you can learn in-demand tech skills for free. Many people don’t know, but Coursera has many free courses, and most of their paid courses are also free-to-audit. They are the best website to learn Data Science and got several useful courses to learn essential Data Science skills like SQL. Here are some of the Coursera courses you can join to learn SQL for FREE: Overall, these are some of the best SQL courses from Coursera which you can take to learn this useful tech skill. Most of them are either free or free-to-audit. When it comes to joining this course, you have two options, you can either join this course alone which costs around $39 per month for specialization, you can also join Coursera Plus for $59 per month, a subscription plan from Coursera which gives you unlimited access to their most popular courses, specialization, professional certificate, and guided projects. Coursera Plus | Unlimited Access to 7,000+ Online Courses Invest in your professional goals with Coursera Plus. Get Unlimited access to over 90% of courses, Projects… coursera.pxf.io 3. SQLZoo SQLZoo is one of the best, and I guess, the most popular website for learning SQL online. It provides both tutorials and exercises, and that’s why it is equally useful for someone just starting with SQL and programmers who know SQL but want some good practice to really master it. The SQLZoo provides easy-to-understand tutorials and interactive examples to write queries and see results right in your browser. You will find SQL interactive tutorials, examples, and exercises on this website. It covers most SQL clauses like SELECT clause to read data, CREATE to make a new database, ALTER to change the database, and DELETE to remove data and tables. It also covers advanced concepts like GROUP BY, Indexes, Views, SQL Joins, Sub-queries, handling NULL values in SQL, etc. SQLZoo also has several SQL quizzes to test your knowledge. In short, this site is one of the best resources to learn and master SQL online, and it’s FREE. Every programmer who has an interest in SQL can benefit from this site. 3. Learn SQL from CodeCademy [FREE] This is another great place or website to learn SQL for FREE. Codecademy was one of the first interactive websites I learned about, and since then, I have learned many key skills like Linux bash, SQL, Java, and JavaScript on Codecademy. Again most of their courses are free, but not all of them, and you need Codecademy PRO membership to access their premium courses. In this free SQL course, you’ll learn how to communicate with relational databases through SQL. You’ll not only learn but practice with 4 projects — how to manipulate data and build queries that communicate with more than one table. Here are things you will learn in this free SQL course on Codecademy: More than 1.2 million people have joined this free SQL course, and you can join too. 4. SQL Course from Stanford University This is a free SQL course provided by Stanford University. This course contains good SQL video tutorials to explain both the basic and advanced SQL and Relational databases concepts. You can use this course in both registered and non-registered mode, though it’s better to get registered to save your progress. It’s also a self-paced course so that you can learn at your own speed. This website also provides all course material for free, like SQL scripts, course slides, etc., which you can download from relevant sections. Given this course is from Stanford University, you can rest assured of quality. 5. SQL Course from Khan Academy One of the best websites to learn computer science and programming online, Khan Academy also has a good SQL tutorial with the title “Intro to SQL: Querying and managing databases.” In this free SQL tutorial, you’ll learn how to use SQL to store, query, and manipulate data. SQL is a special-purpose programming language designed to manage data in a relational database and is used by many apps and organizations. I have used some tutorials from Khan Academy in the past, and this is one of them; it’s like a virtual classroom. A good companion of SQLZoo makes your study complete. You can also take help from some good SQL books like Head First SQL. If you are a beginner, the head first way is one of the best ways to learn SQL. 6. SQL Tutorial — Full Database Course for Beginners [FreeCodeCamp] FreeCodecamp is another useful place to learn tech skills. They have a website freecodecamp.org and a Youtube channel which is full of free but comprehensive courses and this is one of them. This SQL course has got more than 7 million views and I think it's Youtube’s most popular free SQL course. The course is designed for beginners to SQL and database management systems and will introduce common database management topics. Throughout the course, you'll learn key SQL topics like schema design, basic C.R.U.D operations, aggregation, nested queries, joins, keys, and much more. You can watch this course right here or on youtube for FREE. 7. SQLBolt SQLBolt is another good website to learn SQL with simple, interactive examples. It contains a series of interactive lessons and exercises designed to help you quickly learn SQL right in your browser. It contains 20 lessons from a basic SQL query to more advanced and confusing Join queries, aggregation, filtering, and dealing with nulls. It is one of the best resources to learn SQL for complete beginners. So if you are the one who wants to learn SQL or you know SQL but don’t feel comfortable, then go and try out SQLBolt’s interactive SQL tutorials. SQLBolt also has SQL tasks after each lesson, which will force you to use the knowledge you have learned in the lesson. The quality of queries is good, easy to start with, and getting difficult afterward. If you are stuck while writing an SQL query to solve the task, you can even take help from their solution. I suggest you finish the task as soon as you finish the lessor and then do the task with some variation the next day. 8. Datacamp Many people don’t know that Datacamp has an excellent SQL course which you can use to learn SQL for Data Science. The course is an excellent resource to master the basics of querying tables in relational databases such as MySQL, SQL Server, and PostgreSQL. This course teaches syntax in SQL shared by many types of databases, such as PostgreSQL, MySQL, SQL Server, and Oracle, and it will tell you everything you need to know to begin working with databases today! The first chapter, “Filtering columns,” is completely free. You’ll learn about tables, columns, and rows in SQL, how to talk about them using database lingo, and how to begin an analysis using simple SQL commands to select and summarize columns from database tables. By joining this SQL course, you will learn important SQL skills by solving gamified problems for encouragement and learning. By the way, other chapters are not free, and you may need to buy a Datacamp subscription to access them. Nevertheless, a great resource for beginners, and I highly recommend this one. And, If you are someone like me who knows SQL but always looking to increase knowledge and loves to try out some good SQL queries, check out Joe Celko’s SQL Puzzles and Answers, Second Edition; it is one of the excellent resources to learn and master SQL programming. That’s all about some of the best resources to learn SQL and Database concepts online for FREE. Though the Internet is full of free stuff, it’s hard to find a good resource. I still respect curated resources and have benefited a lot from them. Though nothing can substitute classroom training, a combination of books, blogs, video tutorials, and interactive websites can really help you get there. Some other FREE online resources for Programmers Thanks for reading this article so far. If you like these websites to learn SQL online for FREE, please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note. P. S. — If you don’t mind paying few bucks to learn a valuable skill like SQL which can pay for a long time then I also recommend you to check out An Introductory Guide to SQL course on Educative, an interactive, text-based website where you can practice SQL online on your browser without installing any database or setting up the table and test data. An Introductory Guide to SQL - Learn Interactively The ability to work SQL is becoming an increasingly in-demand skill, both for software developers and people in less… www.educative.io -- -- 5 Published in Javarevisited A humble place to learn Java and Programming better. Written by javinpaul I am Java programmer, blogger, working on Java, J2EE, UNIX, FIX Protocol. I share Java tips on http://javarevisited.blogspot.com and http://java67.com Responses (5) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",
      "title": "https://www.sqlrevisited.com/2024/01/top-10-websites-to-learn-sql-for-free.html"
    },
    {
      "url": "https://www.codecademy.com/learn/learn-sql",
      "content": "Learn SQL | Codecademy Skip to Content Loading menu bar Loading menu bar Search Free Course Learn SQL In this SQL course, you’ll learn how to manage large datasets and analyze real data using the standard data management language. 4.6 20,915 ratings This course includes AI assistance for guided coding help Projects to apply new skills Quizzes to test your knowledge A certificate of completion Start 1,031,107 learners enrolled This course includes AI assistance for guided coding help Projects to apply new skills Quizzes to test your knowledge A certificate of completion Skill level Beginner Time to complete Average based on combined completion rates — individual pacing in lessons, projects, and quizzes may vary 5 hours Projects 5 Prerequisites None About this course Information is all around us. You can put it to use by learning SQL basics. Used in data science, analytics, and engineering, SQL makes it easy to work with data and make more informed strategy, operations, and business decisions. It’s a helpful skill for anyone who works with data (even in non-tech roles). In this SQL course, you’ll learn how to manage large datasets and analyze real data. Skills you'll gain Work with databases using SQL Create queries for tables Build SQL projects Syllabus 4 lessons • 5 projects • 4 quizzes Expand all sections 1 Manipulation Learn how to use SQL to access, create, and update data stored in a database. 2 Queries Perform more complex queries by learning essential query keywords and functionality 3 Aggregate Functions Learn powerful functions for performing complex database operations with ease. 4 Multiple Tables Expand your SQL skills by creating and manipulating databases with multiple related tables Certificate of completion available with Plus or Pro Earn a certificate of completion and showcase your accomplishment on your resume or LinkedIn. Start The platform Hands-on learning AI-assisted learning Make progress faster with our AI Learning Assistant, a tool that automatically understands your current course, instructions, and solution code — and gives you instant, personalized feedback. Real-world projects Take what you're learning into the real world. Choose from guided projects that help you solidify new concepts — or test yourself with independent projects designed to build your portfolio. Job-readiness checker See how well your skills and experience meet the requirements for jobs you're interested in. AI generates a personalized report to show you how ready you are for your dream job and where to improve to qualify for a role. Interview simulator Use AI to identify strengths and get personalized, actionable feedback to improve your interviewing skills. Easily see what's needed to improve your skills — no matter what stage you're at in your career. Assessments Test new skills as you learn them so you can better understand and apply new concepts. You'll also see which topics need more review and get practice recommendations to continue to improve. Explore features Projects in this course practice Project ### Create a Table Build fluency in SQL manipulation. We're going to practice creating tables in SQL so you can hone your skills and feel confident taking them to the real world. practice Project ### New York Restaurants Practice writing the most common types of queries. practice Project ### Analyze Hacker News Trends Query Hacker News data using SQL to discover trends. Earn a certificate of completion Show your network you've done the work by earning a certificate of completion for each course or path you finish. Show proofReceive a certificate that demonstrates you've completed a course or path. Build a collectionThe more courses and paths you complete, the more certificates you collect. Share with your networkEasily add certificates of completion to your LinkedIn profile to share your accomplishments. Learn SQL course ratings and reviews 4.6 20,915 ratings 5 stars 68% 4 stars 25% 3 stars 6% 2 stars 1% 1 star 1% This course is great for people with no prior knowledge on SQL. I feel that it digs deep without overwhelming you with too much information and you can really learn at your own speed. Great overall. Anthony T. Verified Learner I really enjoyed how the course touches on the essential with just enough context. It was exactly what I was looking for to start using SQL to query data the next day. The practice ground and guide was very useful as well Y. A. Verified Learner I learned SQL in my college course but I liked they way codecademy taught it a lot better! I liked the visual graphics of how the tables transform when they merge together since I have issues visualizing the actual changes. Chelsey N. Verified Learner Our learners work at Frequently asked questions about SQL What is SQL? SQL (Structured Query Language) is a programming language used to manage data stored in relational databases, which store structured data in tables. Its syntax is easy to read, so it’s easy to pick up on even if you’re completely new to programming, and it’s even useful for non-technical careers. What does SQL do? What kind of jobs can SQL get me? What else should I study if I am learning SQL? What do I need to know before learning SQL? Join over 50 million learners and start Learn SQL today! Start Looking for something else? Related resources Article #### What is a Relational Database Management System? Learn about RDBMS and the language used to access large datasets – SQL. Article #### Common SQL Interview Questions Practice with some common SQL interview questions. Article #### Running SQL commands in DB Browser Learn how to use DB Browser to interact with SQLite databases Related courses and paths Skill path #### Analyze Data with SQL Learn to analyze data with SQL and prepare for technical interviews. Includes 9 Courses With Certificate Beginner Friendly 17 hours Free course #### Intro to SQL Use SQL to create, access, and update tables of data in a relational database. Beginner Friendly 2 hours Free course #### Learn SQL: Multiple Tables Combine data stored across multiple tables using joins, unions, and temporary tables. Beginner Friendly 1 hour Browse more topics IT2,576,633 learners enrolled Data engineering2,376,964 learners enrolled Data analytics2,622,102 learners enrolled For business3,528,841 learners enrolled Data science4,660,335 learners enrolled SQL1,338,352 learners enrolled Code foundations7,659,757 learners enrolled Computer science6,122,287 learners enrolled Web development5,133,392 learners enrolled View full catalog Unlock additional features with a paid plan Practice Projects Guided projects that help you solidify the skills and concepts you're learning. Assessments Auto-graded quizzes and immediate feedback help you reinforce your skills as you learn. Certificate of Completion Earn a document to prove you've completed a course or path that you can share with your network. See pricing and plans Company About Careers Affiliates Resources Articles Blog Cheatsheets Code challenges Docs Projects Videos Workspaces Support Help center Resources Articles Blog Cheatsheets Code challenges Docs Projects Videos Workspaces Support Help center Plans For individuals For students For business Discounts Community Visit community Code Crew Events Learner stories Subjects AI Cloud computing Code foundations Computer science Cybersecurity Data analytics Data science Data visualization Developer tools DevOps Game development IT Machine learning Math Mobile development Web design Web development Languages Bash C C++ C# Go HTML & CSS Java JavaScript Kotlin PHP Python R Ruby SQL Swift Career building Career paths Career center Interview prep Professional certification Compare to bootcamps — Full catalog Beta content Roadmap Mobile Mobile Privacy Policy Cookie Policy Do Not Sell My Personal Information Terms Made with ❤️in NYC © 2025 Codecademy",
      "title": "https://www.codecademy.com/learn/learn-sql"
    },
    {
      "url": "https://rivery.io/blog/6-best-free-resources-for-learning-sql/",
      "content": "9 Best Resources To Learn SQL For Free (2025) | Rivery Product Product Overview Your complete data stack solution Get started for free Data Ingestion Connect to any source in minutes Data Orchestration Automate, optimize, and manage your data flow from start to finish Rivery Copilot AI Build Data Pipelines Faster with GenAI Data Transformation Turn raw data into business data models DataOps Management Scale your DataOps from start to finish CDC Replication Replicate your database to a cloud data warehouse in a few clicks Reverse ETL Put your data to operational use Security Connect with confidence Solutions By Use Case Custom Data Integration Low-code connection to any data source Cloud Data Migration Move data from operational databases to your cloud data warehous Cloud Data Lake ETL Centralize all of your data in the cloud Marketing Data Management Easily manage data from any marketing app CRM Data Management Manage Salesforce, HubSpot and leading CRM data with precision AI Data Pipelines Feed AI apps with your data By Tech AWS Google Cloud Azure Snowflake Databricks Sigma Integrations Starter Kits Pricing Resources Learn Docs Demos and how-to documentation for using Rivery Guides Leading in-depth articles and how-tos Blog Explore the latest data insights, tips and more Webinars Tune in anytime to our on-demand webinars Connect Customers Learn why high-performing data teams choose Rivery Events Discover our upcoming events Partners Learn more about our partnership program About This is us Product Product Overview Data Ingestion Data Transformation Data Orchestration DataOps Management CDC Replication Reverse ETL Security Rivery Copilot Solutions By Use Case Custom Data Integration Cloud Data Migration Cloud Data Lake ETL Marketing Data Management CRM Data Management AI Data Pipelines By Tech Snowflake Databricks Google Cloud AWS Azure Sigma Integrations Starter Kits Pricing Resources Learn Docs Guides Blog Webinars Connect Customers Events Partners About Start free Log in Product Product Overview Data Ingestion Data Transformation Data Orchestration DataOps Management CDC Replication Reverse ETL Security Rivery Copilot Solutions By Use Case Custom Data Integration Cloud Data Migration Cloud Data Lake ETL Marketing Data Management CRM Data Management AI Data Pipelines By Tech Snowflake Databricks Google Cloud AWS Azure Sigma Integrations Starter Kits Pricing Resources Learn Docs Guides Blog Webinars Connect Customers Events Partners About Start free Log in Cookie Policy Privacy Policy Terms of Use Security Policy Sitemap © 2025 Rivery Home Blog 9 best resources to learn SQL for free 9 best resources to learn SQL for free Daniel Buchuk OCT 31, 2024 Daniel Buchuk OCT 31, 2024 Share Data integration Data management Data migration DataOps management 4 min read Content Ingest data using Rivery Sign up for free trial These days, it’s not just data engineers who need to know SQL. As relational databases continue to proliferate across various fields, such as marketing and sales, a new cohort of professionals wants to learn SQL. Non-tech professionals like marketers and salespeople can boost their skills by learning SQL without major financial investment, thanks to many free online resources. In this article we list some of the best free SQL resources available to help you get started and take your career to the next level. Here are the 9 best free online resources to learn SQL in 2024: 1. Khan Academy “Intro to SQL: Querying and managing data” by Khan Academy pairs video tutorials with interactive coding challenges for a best-of-both worlds course. Video lessons are shot at the command-line level, clearly demonstrating concepts in the code itself. Frequent coding challenges reinforce the educational content with diverse problem sets. This course is recommended for those who want to combine excellent visual lessons with interactive coding exercises. 2. SQLZoo SQLZoo is an interactive, Wiki-based tutorial that offers lessons and projects for beginners in SQL. Students start with basic functions such as COUNT, SUM, and AVG, and end by building intermediate projects. The lessons center around interactive coding challenges that are meant to be self-explanatory. This is a good resource for students who want to learn SQL through small, simple exercises. 3. Codecademy Codecademy, a leading educational coding platform, offers a free course on SQL. The course is structured as a series of interactive coding tutorials that guide students from basic functionality to varied, long-form projects. Codecademy’s deep reservoir of exercises, and the service’s sleek interface, make for a smooth learning experience. Recommended for students who want more of a professional feel to the learning process. Simple Solutions for Complex Data Pipelines Rivery's SaaS ELT platform provides a unified solution for data pipelines, workflow orchestration, and data operations. Speak to a data expert Some of Rivery's features and capabilities: Completely Automated SaaS Platform: Get setup and start connecting data in the Rivery platform in just a few minutes with little to no maintenance required. 200+ Native Connectors: Instantly connect to applications, databases, file storage options, and data warehouses with our fully-managed and always up-to-date connectors, including BigQuery, Redshift, Shopify, Snowflake, Amazon S3, Firebolt, Databricks, Salesforce, MySQL, PostgreSQL, and Rest API to name just a few. Python Support: Have a data source that requires custom code? With Rivery’s native Python support, you can pull data from any system, no matter how complex the need. 1-Click Data Apps: With Rivery Kits, deploy complete, production-level workflow templates in minutes with data models, pipelines, transformations, table schemas, and orchestration logic already defined for you based on best practices. Data Development Lifecycle Support: Separate walled-off environments for each stage of your development, from dev and staging to production, making it easier to move fast without breaking things. Get version control, API, & CLI included. Solution-Led Support: Consistently rated the best support by G2, receive engineering-led assistance from Rivery to facilitate all your data needs. 4. SQLBolt SQLBolt combines easy-to-follow instructions, a simple interface, and interactive exercises to teach basic proficiency in SQL. Whereas many tutorials are purely coding-based, SQLBolt pairs written explanations with coding trials to give students a clearer and more robust overview of SQL. SQLBolt offers a middle ground between code-only tutorials and overly technical courses. The resource is recommended for students who thrive with text-based explanations backed up by standard exercises. 5. Udacity The “Intro to Relational Databases” course by Udacity is a video course that’s jam packed with extensive SQL tutorials. Through a series of video lessons, the course teaches beginner and intermediate topics that will prepare students for many applications of SQL. While there are coding exercises, students must execute them in their own runtime environments, because the course does not offer interactive coding tests. This course is great for students who excel at learning visually. 6. SQL for Web Nerds Developed by MIT Professor Philip Greenspun, SQL for Web Nerds is a somewhat advanced resource that demystifies the technical nitty-gritty of SQL in a clear and concise way. What the site lacks in flashy design, it makes up for in expert content. Greenspun’s resource offers thorough but concise explanations of SQL elements, but does not have interactive coding exercises. Students can use this resource with the previously discussed interactive coding courses to take their skills to the next level. 7. Datacamp If you’re looking for a basic, introductory look at how to use SQL, Datacamp’s Introduction to SQL Course is perfect. Founded in 2013, the course includes guides, tutorials, and cheat sheets. Datacamp also has short video exercises and coding challenges to ensure you never feel bored. Thousands of learners at 2500 companies use Datacamp, including Google PayPal, EY, Uber, eBay, and Microsoft. The courses are available in programming languages like Phyton, R, SQL, etc. It also covers data manipulation and visualization, machine learning, and statistical analysis. In addition, Datacamp provides a subscription-based model, offering individual and enterprise plans. 8. Coursera The Coursera platform covers essential SQL concepts—including data querying, data manipulation, database design, and optimization techniques. The course modules teach you to identify a subset of data needed from a column or a set of columns. It’ll also teach you how to write an SQL query to limit those results. Likewise, Coursera will teach you to create an analysis table from multiple queries using the UNION operator. You’ll also learn to manipulate strings, dates, and numeric data by using functions to integrate data from different sources into fields. The course is part of the learn SQL Basics for Data Science Specialization. Therefore, you’ll gain a shareable career certificate, develop relevant job skills, grow a foundational understanding of a subject or tool, and learn from industry experts. 9. Databases: Relational Databases and SQL Stanford is one of the best universities in the world, and its self-paced Databases course is an outstanding option. The course is a comprehensive introduction to relational databases, ensuring you understand SQL for relational database systems. The courses predominantly use video lectures and demonstrations. Embedded within these videos are quizzes aimed at assessing comprehension alongside additional standalone quizzes. Each course features an unmoderated discussion forum where learners can engage with peers and access recommended readings and supplementary resources. Each lesson will introduce a different concept and end with an interactive exercise. In addition, the later lessons will show you how to alter a table and create new tables from scratch. Learning SQL for free With the recent explosion of data, different personnel and departments that were once far removed from relational databases are now interacting with them frequently. Marketers, salespeople, and many other non-tech professionals must learn some amount of SQL to take operations to the next level. And with so many free resources out there, no one should make a big monetary investment to do so. The resources in this blog represent just a sliver of the free SQL resources on the web. Use these totally free resources, along with those that you find on your own, to learn the amount of SQL you need to take your career to the next level. Share Sign up to receive blog updates on the latest news and insights Daniel Buchuk Director of Communications Former Marketing Exec at BBC and Head of Brand & Strategy at SimiliarWeb, Daniel's expertise lies in brand and content strategy. He is passionate about helping fast-growing tech companies succeed. Can't miss insights Data integration Data management Data migration ETL-ELT Understanding Data Architecture: Types, Components & Best Practices Kevin Bartley 7 min read Data integration Data management Data migration Big data statistics: How much data is there in the world? Kevin Bartley 5 min read Data integration Data migration ETL-ELT Optimizing Data Pipelines: Understanding Batch Processing vs. Stream Processing Daniel Greenberg 9 min read Minimize the firefighting. Maximize ROI on pipelines. Start for free Product Product Overview Data Ingestion Tool Data Transformation Data Orchestration Platform DataOps Management CDC Replication Starter Kits Security What's New Pricing Solutions Cloud Data Migration Marketing Data Management CRM Data Management Custom Data Connection Cloud Data Lake Digital Agencies Enterprise DataOps AI Data Pipelines Integrations Directory Sources Targets Resources Documentation Webinars and eBooks Blog Customers Events Community Forum Press Compare ETL/ELT Tools Data Learning Center Integration guides Company About Our Partners Become a Partner Careers Fraud Notice Contact Us English Cookie Policy Privacy Policy Terms of Use Security Policy Sitemap",
      "title": "https://rivery.io/blog/6-best-free-resources-for-learning-sql/"
    },
    {
      "url": "https://stackoverflow.com/questions/2577174/join-vs-sub-query",
      "content": "sql - Join vs. sub-query - Stack Overflow Join Stack Overflow ============================================================================================================================= By clicking “Sign up”, you agree to our terms of service and acknowledge you have read our privacy policy. Sign up with Google Sign up with GitHub OR Email Password Sign up Already have an account? Log in Skip to main content Stack Overflow About Products OverflowAI Stack Overflow for Teams Where developers & technologists share private knowledge with coworkers Advertising & Talent Reach devs & technologists worldwide about your product, service or employer brand OverflowAI GenAI features for Teams OverflowAPI Train & fine-tune LLMs Labs The future of collective knowledge sharing About the company Visit the blog Loading… current community Stack Overflow help chat Meta Stack Overflow your communities Sign up or log in to customize your list. more stack exchange communities company blog Log in Sign up Let's set up your homepage Select a few topics you're interested in: ======================================================================== pythonjavascriptc#reactjsjavaandroidhtmlflutterc++node.jstypescriptcssrphpangularnext.jsspring-bootmachine-learningsqlexceliosazuredocker Or search from our full list: javascript python java c# php android html jquery c++ css ios sql mysql r reactjs node.js arrays c asp.net json python-3.x .net ruby-on-rails sql-server swift django angular objective-c excel pandas angularjs regex typescript ruby linux ajax iphone vba xml laravel spring asp.net-mvc database wordpress string flutter postgresql mongodb wpf windows amazon-web-services xcode bash git oracle-database spring-boot dataframe azure firebase list multithreading docker vb.net react-native eclipse algorithm powershell macos visual-studio numpy image forms scala function vue.js performance twitter-bootstrap selenium winforms kotlin loops express dart hibernate sqlite matlab python-2.7 shell rest apache entity-framework android-studio csv maven api linq qt dictionary unit-testing facebook asp.net-core tensorflow apache-spark file swing class unity-game-engine sorting date authentication go symfony t-sql opencv matplotlib .htaccess google-chrome for-loop datetime codeigniter http perl validation sockets google-maps object uitableview xaml oop if-statement visual-studio-code cordova ubuntu web-services email android-layout github elasticsearch spring-mvc kubernetes selenium-webdriver ms-access user-interface parsing ggplot2 pointers machine-learning google-sheets c++11 security flask google-apps-script ruby-on-rails-3 nginx templates variables exception sql-server-2008 gradle debugging tkinter listview delphi jpa asynchronous pdf web-scraping haskell jsp ssl amazon-s3 google-cloud-platform jenkins testing xamarin wcf npm batch-file generics ionic-framework network-programming unix recursion google-app-engine mongoose visual-studio-2010 .net-core android-fragments assembly animation math next.js session svg hadoop intellij-idea curl django-models join rust laravel-5 winapi url heroku http-redirect tomcat google-cloud-firestore inheritance webpack keras image-processing gcc asp.net-mvc-4 logging web dom swiftui matrix pyspark actionscript-3 button post optimization firebase-realtime-database jquery-ui iis cocoa xpath d3.js javafx firefox internet-explorer xslt caching select asp.net-mvc-3 opengl events asp.net-web-api plot dplyr magento encryption search stored-procedures amazon-ec2 ruby-on-rails-4 memory canvas audio multidimensional-array jsf random vector cookies redux facebook-graph-api input flash xamarin.forms indexing arraylist ipad cocoa-touch data-structures video apache-kafka model-view-controller serialization jdbc woocommerce routes azure-devops razor awk servlets mod-rewrite beautifulsoup docker-compose excel-formula iframe filter aws-lambda design-patterns text django-rest-framework visual-c++ cakephp mobile android-intent react-hooks struct methods groovy mvvm ssh lambda checkbox google-chrome-extension ecmascript-6 time installation grails sharepoint cmake shiny spring-security jakarta-ee android-recyclerview plsql core-data types meteor android-activity sed websocket bootstrap-4 activerecord graph replace scikit-learn file-upload group-by vim junit boost deep-learning import sass memory-management error-handling async-await dynamic eloquent soap silverlight dependency-injection charts layout apache-spark-sql deployment browser gridview svn while-loop google-bigquery vuejs2 ffmpeg dll highcharts view foreach plugins makefile c#-4.0 redis reporting-services jupyter-notebook merge server unicode https reflection google-maps-api-3 twitter oauth-2.0 extjs pytorch axios terminal pip split mysqli cmd django-views encoding automation database-design collections netbeans hash build data-binding ember.js tcp sqlalchemy pdo apache-flex concurrency entity-framework-core command-line spring-data-jpa printing java-8 react-redux jestjs service html-table neo4j lua ansible parameters material-ui module enums visual-studio-2012 promise flexbox outlook webview firebase-authentication web-applications uwp jquery-mobile utf-8 datatable python-requests parallel-processing drop-down-menu colors scroll hive tfs scipy count syntax ms-word twitter-bootstrap-3 ssis google-analytics fonts three.js powerbi constructor rxjs graphql file-io paypal discord cassandra socket.io graphics compiler-errors gwt react-router nlp solr url-rewriting backbone.js memory-leaks datatables oauth datagridview terraform drupal oracle11g zend-framework neural-network knockout.js triggers django-forms interface google-api angular-material casting jmeter linked-list proxy path timer django-templates arduino orm directory visual-studio-2015 parse-platform windows-phone-7 cron push-notification conditional-statements primefaces functional-programming pagination model jar xamarin.android hyperlink uiview gitlab visual-studio-2013 vbscript google-cloud-functions azure-active-directory jwt download swift3 sql-server-2005 configuration process rspec pygame properties combobox callback windows-phone-8 linux-kernel safari permissions scrapy raspberry-pi scripting emacs clojure x86 scope io compilation mongodb-query nhibernate responsive-design expo angularjs-directive request azure-functions bluetooth 3d dns binding reference discord.js architecture playframework version-control pyqt doctrine-orm package pycharm get sql-server-2012 rubygems f# autocomplete openssl datepicker kendo-ui tree jackson controller yii grep nested xamarin.ios static dockerfile statistics transactions datagrid null active-directory uiviewcontroller phpmyadmin webforms discord.py notifications sas computer-vision duplicates mocking youtube nullpointerexception yaml menu sum bitmap electron asp.net-mvc-5 time-series visual-studio-2008 blazor yii2 jsf-2 stl css-selectors android-listview floating-point cryptography ant stream hashmap character-encoding sdk msbuild asp.net-core-mvc google-drive-api selenium-chromedriver jboss joomla navigation cors devise anaconda background camera pyqt5 multiprocessing binary frontend cuda linq-to-sql iterator mariadb onclick plotly ios7 rabbitmq android-jetpack-compose android-asynctask microsoft-graph-api tabs laravel-4 insert uicollectionview amazon-dynamodb environment-variables linker console xsd coldfusion upload continuous-integration ftp textview opengl-es operating-system vuejs3 mockito localization xml-parsing macros formatting json.net kivy type-conversion data.table timestamp calendar integer segmentation-fault android-ndk drag-and-drop prolog char crash jasmine automated-tests dependencies geometry android-gradle-plugin itext firebase-cloud-messaging header fortran sprite-kit mfc attributes nuxt.js nosql format azure-pipelines nestjs odoo jquery-plugins db2 jenkins-pipeline leaflet event-handling postman flutter-layout julia annotations keyboard textbox arm visual-studio-2017 gulp libgdx stripe-payments xampp synchronization crystal-reports timezone dom-events azure-web-app-service uikit android-emulator swagger wso2 sequelize.js namespaces aggregation-framework uiscrollview jvm google-sheets-formula chart.js com subprocess geolocation webdriver centos html5-canvas widget snowflake-cloud-data-platform dialog garbage-collection numbers concatenation sql-update qml set windows-10 mapreduce tuples smtp ionic2 java-stream rotation modal-dialog spring-data android-edittext http-headers doctrine nuget radio-button grid sonarqube lucene xmlhttprequest internationalization listbox components initialization switch-statement google-play apache-camel boolean serial-port ldap ios5 youtube-api return gdb pivot latex eclipse-plugin frameworks tags containers github-actions dataset asp-classic subquery foreign-keys label copy uinavigationcontroller c++17 delegates google-cloud-storage migration struts2 base64 protractor find sql-server-2008-r2 queue uibutton embedded arguments composer-php append jaxb zip stack cucumber autolayout ide entity-framework-6 popup iteration airflow windows-7 r-markdown tailwind-css ssl-certificate vb6 gmail hover jqgrid g++ udp Next You’ll be prompted to create an account to view your personalized homepage. Home Questions Tags Users Companies Labs Jobs Discussions Collectives Communities for your favorite technologies. Explore all Collectives Teams Ask questions, find answers and collaborate at work with Stack Overflow for Teams. Try Teams for free Explore Teams Teams Ask questions, find answers and collaborate at work with Stack Overflow for Teams. Explore Teams Collectives™ on Stack Overflow Find centralized, trusted content and collaborate around the technologies you use most. Learn more about Collectives Teams Q&A for work Connect and share knowledge within a single location that is structured and easy to search. Learn more about Teams Get early access and see previews of new features. Learn more about Labs ================================================================================================================================ Hang on, you can't upvote just yet. You'll need to complete a few actions and gain 15 reputation points before being able to upvote. Upvoting indicates when questions and answers are useful. What's reputation and how do I get it? Instead, you can save this post to reference later. Save this post for later Not now Join vs. sub-query Ask Question Asked 14 years, 11 months ago Modified 3 years, 6 months ago Viewed 669k times This question shows research effort; it is useful and clear 1139 Save this question. Show activity on this post. I am an old-school MySQL user and have always preferred JOIN over sub-query. But nowadays everyone uses sub-query, and I hate it; I don't know why. I lack the theoretical knowledge to judge for myself if there is any difference. Is a sub-query as good as a JOIN and therefore is there nothing to worry about? sql mysql subquery join Share Share a link to this question Copy linkCC BY-SA 4.0 Improve this question Follow Follow this question to receive notifications edited Nov 3, 2018 at 18:00 Peter Mortensen 31.6k2222 gold badges110110 silver badges133133 bronze badges asked Apr 5, 2010 at 6:22 Your Common SenseYour Common Sense 158k4242 gold badges224224 silver badges366366 bronze badges 7 35 Subqueries are great sometimes. They suck performance-wise in MySQL. Don't use them. – runrig Commented May 20, 2010 at 16:52 10 I was always under the impression that sub-queries implicitly were executed as joins where available in certain DB technologies. – Kieran Senior Commented May 28, 2010 at 9:43 27 Sub queries don't always suck, when joining with pretty large tables, the preferred way is to do a sub-select from that large table (limiting the number of rows) and then joining. – ovais.tariq Commented Jun 13, 2010 at 11:15 4 Potentially related (although much more specific): stackoverflow.com/questions/141278/subqueries-vs-joins/… – Daisy Leigh Brenecki Commented Mar 29, 2011 at 3:18 3 @Piskvor Considering that MySQL didn't support subqueries until 4.1, to an \"old-school MySQL user\", seeing just a few people using subqueries must seem like \"everyone\". :) – spaaarky21 Commented Jun 12, 2014 at 21:19 | Show 2 more comments 20 Answers 20 Sorted by: Reset to default This answer is useful 1125 Save this answer. Show activity on this post. Sub-queries are the logically correct way to solve problems of the form, \"Get facts from A, conditional on facts from B\". In such instances, it makes more logical sense to stick B in a sub-query than to do a join. It is also safer, in a practical sense, since you don't have to be cautious about getting duplicated facts from A due to multiple matches against B. Practically speaking, however, the answer usually comes down to performance. Some optimisers suck lemons when given a join vs a sub-query, and some suck lemons the other way, and this is optimiser-specific, DBMS-version-specific and query-specific. Historically, explicit joins usually win, hence the established wisdom that joins are better, but optimisers are getting better all the time, and so I prefer to write queries first in a logically coherent way, and then restructure if performance constraints warrant this. Share Share a link to this answer Copy linkCC BY-SA 2.5 Improve this answer Follow Follow this answer to receive notifications answered Apr 5, 2010 at 6:26 Marcelo CantosMarcelo Cantos 186k4040 gold badges335335 silver badges366366 bronze badges 10 4 @Marcelo Cantos, Could you please give an example of your statement \"It is also safer, in a practical sense, since you don't have to be cautious about getting duplicated facts from A due to multiple matches against B.\"? I found this very insightful yet a little too abstract. Thanks. – Jinghui Niu Commented Sep 23, 2016 at 11:33 10 @JinghuiNiu Customers who bought expensive items: select custid from cust join bought using (custid) where price > 500. If a customer bought multiple expensive items, you'll get double-ups. To fix this, select custid from cust where exists (select * from bought where custid = cust.custid and price > 500). You could use select distinct … instead, but it's often more work, either for the optimizer or the evaluator. – Marcelo Cantos Commented Sep 23, 2016 at 11:48 1 @MatTheWhale yes I used an oversimplified answer coz I was lazy. In a real scenario you would be pulling more columns than just custid from cust. – Marcelo Cantos Commented Sep 8, 2017 at 23:15 1 Eternal dilemma between writing code for machine versus for humans. Some would argue don't worry about performance until it is an issue, I'd add : test test test the claim that joins are significantly faster than sub-queries – user10089632 Commented Jan 20, 2018 at 14:06 1 I did this mistake in the past and some people i know keep making this mistake with Join: SELECT SUM(A.Something) AS SumSomething, ... FROM A LEFT JOIN B ON B.A_ID = A.ID So yes, subqueries are safer for non-superprofessionals. – Andrei Commented Mar 8, 2018 at 9:09 | Show 5 more comments This answer is useful 410 Save this answer. Show activity on this post. In most cases JOINs are faster than sub-queries and it is very rare for a sub-query to be faster. In JOINs RDBMS can create an execution plan that is better for your query and can predict what data should be loaded to be processed and save time, unlike the sub-query where it will run all the queries and load all their data to do the processing. The good thing in sub-queries is that they are more readable than JOINs: that's why most new SQL people prefer them; it is the easy way; but when it comes to performance, JOINS are better in most cases even though they are not hard to read too. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited May 15, 2012 at 20:38 htoip 43955 silver badges1919 bronze badges answered Apr 5, 2010 at 6:39 KronassKronass 5,40633 gold badges2020 silver badges2525 bronze badges 12 23 Yes, most databases therefore includes it as an optimization step to convert subqueries into joins when it is analyzing your query. – Cine Commented May 28, 2010 at 9:38 19 This answer is a bit too simplified for the question that was asked. As you state: certain subqueries are ok and certain are not. The answer does not really help to distinguish the two. (also the 'very rare' really depends on your data/app). – Unreason Commented May 28, 2010 at 9:48 23 can you prove any of your points with documentation reference or test results? – Uğur Gümüşhan Commented Nov 16, 2011 at 10:08 73 I made very good experiences with sub-queries that contain a back-reference to the upper query, especially when it comes to row-counts above 100,000. The thing seems to be memory usage and paging to the swap-file. A join would produce a very big amount of data, that may not fit into memory and must be paged into the swap-file. Whenever this is the case the query-times of small sub-selects like select * from a where a.x = (select b.x form b where b.id = a.id) is extremely small compared to a join. This is a very specific problem, but in some cases it brings you from hours to minutes. – zuloo Commented Nov 28, 2011 at 12:47 14 I'm experienced with Oracle and I can say, sub-queries are much better on large tables if you don't have any filtering or sorting on them. – Amir Pashazadeh Commented May 13, 2012 at 18:16 | Show 7 more comments This answer is useful 277 Save this answer. Show activity on this post. Taken from the MySQL manual (13.2.10.11 Rewriting Subqueries as Joins): A LEFT [OUTER] JOIN can be faster than an equivalent subquery because the server might be able to optimize it better—a fact that is not specific to MySQL Server alone. So subqueries can be slower than LEFT [OUTER] JOIN, but in my opinion their strength is slightly higher readability. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited Apr 25, 2019 at 15:52 answered Sep 20, 2016 at 8:09 simhumilecosimhumileco 34.7k1717 gold badges147147 silver badges123123 bronze badges 5 52 @user1735921 IMO it depends ... Generally, it's very important the readability of the code, because it is of great importance for later management of it... Let's remember the famous statement of Donald Knuth: \"Premature optimization is the root of all evil (or at least most of it) in programming\". However, naturally there are programming areas where performance is paramount... Ideally, when one succeeds in reconciling one with another :) – simhumileco Commented Oct 3, 2017 at 13:31 53 In more complex queries, I find joins much easier to read than sub-queries. sub-queries turn into a bowl of noodles in my head. – Zahra Commented Nov 1, 2017 at 20:30 2 Joins have higher readability as well as performance but if you are using way too many joins (like 5-10) in the query it would better to think of some optimization and breaking into two queries or sub queries which will increase performance as well as readabilty, thats what I learnt from my experience. – user1735921 Commented Dec 8, 2017 at 6:30 7 @user1735921 Only if the performance gains are worth the increase in maintenance time required in the future – Joshua Schlichting Commented Feb 28, 2018 at 14:01 5 My opinion Join and sub query has different syntax, so readability we can not compare, both have higher readability as long as you are good in SQL syntax. Performance is more important. – Thavaprakash Swaminathan Commented May 7, 2018 at 12:59 Add a comment | This answer is useful 208 Save this answer. Show activity on this post. In the year 2010 I would have joined the author of this questions and would have strongly voted for JOIN, but with much more experience (especially in MySQL) I can state: Yes subqueries can be better. I've read multiple answers here; some stated subqueries are faster, but it lacked a good explanation. I hope I can provide one with this (very) late answer: First of all, let me say the most important: There are different forms of sub-queries And the second important statement: Size matters If you use sub-queries, you should be aware of how the DB-Server executes the sub-query. Especially if the sub-query is evaluated once or for every row! On the other side, a modern DB-Server is able to optimize a lot. In some cases a subquery helps optimizing a query, but a newer version of the DB-Server might make the optimization obsolete. Sub-queries in Select-Fields sql SELECT moo, (SELECT roger FROM wilco WHERE moo = me) AS bar FROM foo Be aware that a sub-query is executed for every resulting row from foo. Avoid this if possible; it may drastically slow down your query on huge datasets. However, if the sub-query has no reference to foo it can be optimized by the DB-server as static content and could be evaluated only once. Sub-queries in the Where-statement sql SELECT moo FROM foo WHERE bar = (SELECT roger FROM wilco WHERE moo = me) If you are lucky, the DB optimizes this internally into a JOIN. If not, your query will become very, very slow on huge datasets because it will execute the sub-query for every row in foo, not just the results like in the select-type. Sub-queries in the Join-statement sql SELECT moo, bar FROM foo LEFT JOIN ( SELECT MIN(bar), me FROM wilco GROUP BY me ) ON moo = me This is interesting. We combine JOIN with a sub-query. And here we get the real strength of sub-queries. Imagine a dataset with millions of rows in wilco but only a few distinct me. Instead of joining against a huge table, we have now a smaller temporary table to join against. This can result in much faster queries depending on database size. You can have the same effect with CREATE TEMPORARY TABLE ... and INSERT INTO ... SELECT ..., which might provide better readability on very complex queries (but can lock datasets in a repeatable read isolation level). Nested sub-queries sql SELECT VARIANCE(moo) FROM ( SELECT moo, CONCAT(roger, wilco) AS bar FROM foo HAVING bar LIKE 'SpaceQ%' ) AS temp_foo GROUP BY moo You can nest sub-queries in multiple levels. This can help on huge datasets if you have to group or change the results. Usually the DB-Server creates a temporary table for this, but sometimes you do not need some operations on the whole table, only on the resultset. This might provide a much better performance depending on the size of the table. Conclusion Sub-queries are no replacement for a JOIN and you should not use them like this (although possible). In my humble opinion, the correct use of a sub-query is the use as a quick replacement of CREATE TEMPORARY TABLE .... A good sub-query reduces a dataset in a way you cannot accomplish in an ON statement of a JOIN. If a sub-query has one of the keywords GROUP BY or DISTINCT and is preferably not situated in the select fields or the where statement, then it might improve performance a lot. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited May 7, 2021 at 15:04 answered Apr 9, 2018 at 17:41 TrendfischerTrendfischer 7,66777 gold badges4343 silver badges5353 bronze badges 8 6 For Sub-queries in the Join-statement: (1) generating derived table from the sub-query itself could take a very long time. (2) the resulting derived table is not indexed. these two alone could significantly slow down the SQL. – jxc Commented Mar 12, 2019 at 14:18 @jxc I can only speak for MySQL (1) There it is a temporary table similar to a join. The time depends on the amount of data. If you cannot reduce the data with a subquery, use a join. (2) This is right, it depends on the factor you can reduce the data in the temporary table. I had real world cases, where I could reduce the join size form some millions to a few hundred and reducing the query time from multiple seconds (with full index usage) to a quarter of a second with a subquery. – Trendfischer Commented Mar 12, 2019 at 14:51 1 IMO: (1) such temporary table (derived table) is not materialized, thus each time you run the SQL, the temporary table must be recreated, that could be very costly and a real bottle-neck (i.e. running a group by on millions of records) (2) even if you can reduce the size of temp table to 10 records, since there is no index, that still means potentially to query 9 times more data records than w/o the temp table when JOINing other tables. BTW I had this issue before with my db(MySQL), in my case, using sub-query in SELECT list could be much faster. – jxc Commented Mar 12, 2019 at 15:24 1 Using EXPLAIN should be enough to see how the DERIVED table(created from sub-query in the FROM list) could impact the query. I use sub-queries a lot at work, just try to mention that sub-queries in the Join-statement is probably not as promising as you think. the reduced records from the temporary table could have a much bigger cost than its gain. Also remember, even if the final JOINs could take less time, the time to scan millions of records in the sub-query remain and need to count for each SQL run. – jxc Commented Mar 13, 2019 at 14:33 1 As mentioned enough here: it depends heavily on your circumstances. So just try it out. I thought the SELECT ... INNER JOIN (subquery) looked like a really smart idea which then turned out to run twice as long as SELECT ... IN (subquery). Main table ~100,000 records subquery <10 records retrieved from the main table. – Holger Böhnke Commented Sep 30, 2022 at 5:41 | Show 3 more comments This answer is useful 154 Save this answer. Show activity on this post. Use EXPLAIN to see how your database executes the query on your data. There is a huge \"it depends\" in this answer... PostgreSQL can rewrite a subquery to a join or a join to a subquery when it thinks one is faster than the other. It all depends on the data, indexes, correlation, amount of data, query, etc. Share Share a link to this answer Copy linkCC BY-SA 2.5 Improve this answer Follow Follow this answer to receive notifications answered Apr 5, 2010 at 7:37 Frank HeikensFrank Heikens 128k2626 gold badges155155 silver badges152152 bronze badges 2 2 I've got a left join much slower than sub query, so I don't think it will really do the job. – hukeping Commented Oct 28, 2021 at 13:26 1 @hukeping it depends on how you have set up your database (e.g. indexes), especially when using mysql. You can mess up a lot with the strategy of the database based on your configuration, that results in such things. You can't assume, that it doesn't do the job based on your 'experience', that had happened to you that one time. – Sercan Samet Savran Commented May 5, 2023 at 10:02 Add a comment | This answer is useful 45 Save this answer. Show activity on this post. First of all, to compare the two first you should distinguish queries with subqueries to: a class of subqueries that always have corresponding equivalent query written with joins a class of subqueries that can not be rewritten using joins For the first class of queries a good RDBMS will see joins and subqueries as equivalent and will produce same query plans. These days even mysql does that. Still, sometimes it does not, but this does not mean that joins will always win - I had cases when using subqueries in mysql improved performance. (For example if there is something preventing mysql planner to correctly estimate the cost and if the planner doesn't see the join-variant and subquery-variant as same then subqueries can outperform the joins by forcing a certain path). Conclusion is that you should test your queries for both join and subquery variants if you want to be sure which one will perform better. For the second class the comparison makes no sense as those queries can not be rewritten using joins and in these cases subqueries are natural way to do the required tasks and you should not discriminate against them. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Apr 22, 2014 at 7:57 broadband 3,49877 gold badges4848 silver badges7878 bronze badges answered May 28, 2010 at 9:33 UnreasonUnreason 12.7k22 gold badges3838 silver badges5151 bronze badges 1 4 can you provide an example of a query written using sub-queries that can not be converted to joins (second class, as you call it)? – Zahra Commented Nov 1, 2017 at 20:35 Add a comment | This answer is useful 27 Save this answer. Show activity on this post. I think what has been under-emphasized in the cited answers is the issue of duplicates and problematic results that may arise from specific (use) cases. (although Marcelo Cantos does mention it) I will cite the example from Stanford's Lagunita courses on SQL. Student Table sql +------+--------+------+--------+ | sID | sName | GPA | sizeHS | +------+--------+------+--------+ | 123 | Amy | 3.9 | 1000 | | 234 | Bob | 3.6 | 1500 | | 345 | Craig | 3.5 | 500 | | 456 | Doris | 3.9 | 1000 | | 567 | Edward | 2.9 | 2000 | | 678 | Fay | 3.8 | 200 | | 789 | Gary | 3.4 | 800 | | 987 | Helen | 3.7 | 800 | | 876 | Irene | 3.9 | 400 | | 765 | Jay | 2.9 | 1500 | | 654 | Amy | 3.9 | 1000 | | 543 | Craig | 3.4 | 2000 | +------+--------+------+--------+ Apply Table (applications made to specific universities and majors) sql +------+----------+----------------+----------+ | sID | cName | major | decision | +------+----------+----------------+----------+ | 123 | Stanford | CS | Y | | 123 | Stanford | EE | N | | 123 | Berkeley | CS | Y | | 123 | Cornell | EE | Y | | 234 | Berkeley | biology | N | | 345 | MIT | bioengineering | Y | | 345 | Cornell | bioengineering | N | | 345 | Cornell | CS | Y | | 345 | Cornell | EE | N | | 678 | Stanford | history | Y | | 987 | Stanford | CS | Y | | 987 | Berkeley | CS | Y | | 876 | Stanford | CS | N | | 876 | MIT | biology | Y | | 876 | MIT | marine biology | N | | 765 | Stanford | history | Y | | 765 | Cornell | history | N | | 765 | Cornell | psychology | Y | | 543 | MIT | CS | N | +------+----------+----------------+----------+ Let's try to find the GPA scores for students that have applied to CS major (regardless of the university) Using a subquery: ```sql select GPA from Student where sID in (select sID from Apply where major = 'CS'); +------+ | GPA | +------+ | 3.9 | | 3.5 | | 3.7 | | 3.9 | | 3.4 | +------+ ``` The average value for this resultset is: ```sql select avg(GPA) from Student where sID in (select sID from Apply where major = 'CS'); +--------------------+ | avg(GPA) | +--------------------+ | 3.6800000000000006 | +--------------------+ ``` Using a join: ```sql select GPA from Student, Apply where Student.sID = Apply.sID and Apply.major = 'CS'; +------+ | GPA | +------+ | 3.9 | | 3.9 | | 3.5 | | 3.7 | | 3.7 | | 3.9 | | 3.4 | +------+ ``` average value for this resultset: ```sql select avg(GPA) from Student, Apply where Student.sID = Apply.sID and Apply.major = 'CS'; +-------------------+ | avg(GPA) | +-------------------+ | 3.714285714285714 | +-------------------+ ``` It is obvious that the second attempt yields misleading results in our use case, given that it counts duplicates for the computation of the average value. It is also evident that usage of distinct with the join - based statement will not eliminate the problem, given that it will erroneously keep one out of three occurrences of the 3.9 score. The correct case is to account for TWO (2) occurrences of the 3.9 score given that we actually have TWO (2) students with that score that comply with our query criteria. It seems that in some cases a sub-query is the safest way to go, besides any performance issues. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Sep 20, 2017 at 13:30 answered Oct 19, 2016 at 10:05 pkaramolpkaramol 19.5k5858 gold badges204204 silver badges429429 bronze badges 1 3 I think you can't use a sub-query here. This isn't a case where you logically can use either but one gives a wrong answer because of the technical implementation of it. This is a case where you CANNOT use a sub-query because a student not belonging to CS can score 3.9 which is in the IN list of scores. The context of CS is lost once sub-query is executed,which isn't what we want logically. So this isn't a good example where either can be used. Usage of sub-query is conceptually/logically wrong for this use-case even if luckily it gives right result for a different dataset. – Saurabh Patil Commented Mar 9, 2018 at 13:39 Add a comment | This answer is useful 22 Save this answer. Show activity on this post. MSDN Documentation for SQL Server says Many Transact-SQL statements that include subqueries can be alternatively formulated as joins. Other questions can be posed only with subqueries. In Transact-SQL, there is usually no performance difference between a statement that includes a subquery and a semantically equivalent version that does not. However, in some cases where existence must be checked, a join yields better performance. Otherwise, the nested query must be processed for each result of the outer query to ensure elimination of duplicates. In such cases, a join approach would yield better results. so if you need something like sql select * from t1 where exists select * from t2 where t2.parent=t1.id try to use join instead. In other cases, it makes no difference. I say: Creating functions for subqueries eliminate the problem of cluttter and allows you to implement additional logic to subqueries. So I recommend creating functions for subqueries whenever possible. Clutter in code is a big problem and the industry has been working on avoiding it for decades. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Sep 22, 2012 at 11:50 answered Nov 16, 2011 at 9:50 Uğur GümüşhanUğur Gümüşhan 2,54344 gold badges3737 silver badges6565 bronze badges 3 10 Replacing subqueries with functions is a very bad idea performance-wise in some RDBMS (e.g. Oracle), so I'd recommend just the opposite - use subqueries/joins instead of functions wherever possible. – Frank Schmitt Commented Dec 22, 2012 at 13:32 4 @FrankSchmitt please support your argument with references. – Uğur Gümüşhan Commented Dec 24, 2012 at 8:04 2 There are also cases where you should use a sub query instead of a join even if you check for existence: if you check for NOT EXISTS. A NOT EXISTS wins over a LEFT OUTER JOIN for various reasons: preformance, fail-safety (in case of nulable columns) and readability. sqlperformance.com/2012/12/t-sql-queries/left-anti-semi-join – Tim Schmelter Commented Oct 14, 2013 at 15:43 Add a comment | This answer is useful 21 Save this answer. Show activity on this post. As per my observation like two cases, if a table has less then 100,000 records then the join will work fast. But in the case that a table has more than 100,000 records then a subquery is best result. I have one table that has 500,000 records on that I created below query and its result time is like sql SELECT * FROM crv.workorder_details wd inner join crv.workorder wr on wr.workorder_id = wd.workorder_id; Result : 13.3 Seconds sql select * from crv.workorder_details where workorder_id in (select workorder_id from crv.workorder) Result : 1.65 Seconds Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited May 1, 2019 at 3:04 akash kubavat 84766 silver badges1717 bronze badges answered Apr 10, 2017 at 9:59 Vijay GajeraVijay Gajera 1,3741111 silver badges1313 bronze badges 3 I agree, sometimes breaking the query also works, when you have million records, you don't want to use joins because they take for ever. Rather handle it in the code and map in the code is better. – user1735921 Commented Oct 3, 2017 at 12:53 1 Tie your joins aren't working fast enough, you might be missing an index. Query Analyzer can be pretty helpful in comparing actual performance. – digital.aaron Commented Dec 1, 2017 at 4:30 28 How does it make any sense to compare the performance of two queries which return different results? – Paul Spiegel Commented Mar 11, 2018 at 16:27 Add a comment | This answer is useful 18 Save this answer. Show activity on this post. A general rule is that joins are faster in most cases (99%). The more data tables have, the subqueries are slower. The less data tables have, the subqueries have equivalent speed as joins. The subqueries are simpler, easier to understand, and easier to read. Most of the web and app frameworks and their \"ORM\"s and \"Active record\"s generate queries with subqueries, because with subqueries are easier to split responsibility, maintain code, etc. For smaller web sites or apps subqueries are OK, but for larger web sites and apps you will often have to rewrite generated queries to join queries, especial if a query uses many subqueries in the query. Some people say \"some RDBMS can rewrite a subquery to a join or a join to a subquery when it thinks one is faster than the other.\", but this statement applies to simple cases, surely not for complicated queries with subqueries which actually cause a problems in performance. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited Nov 4, 2018 at 7:07 answered Sep 23, 2018 at 10:36 fico7489fico7489 8,56077 gold badges5959 silver badges9393 bronze badges 0 Add a comment | This answer is useful 16 Save this answer. Show activity on this post. Run on a very large database from an old Mambo CMS: sql SELECT id, alias FROM mos_categories WHERE id IN ( SELECT DISTINCT catid FROM mos_content ); 0 seconds sql SELECT DISTINCT mos_content.catid, mos_categories.alias FROM mos_content, mos_categories WHERE mos_content.catid = mos_categories.id; ~3 seconds An EXPLAIN shows that they examine the exact same number of rows, but one takes 3 seconds and one is near instant. Moral of the story? If performance is important (when isn't it?), try it multiple ways and see which one is fastest. And... sql SELECT DISTINCT mos_categories.id, mos_categories.alias FROM mos_content, mos_categories WHERE mos_content.catid = mos_categories.id; 0 seconds Again, same results, same number of rows examined. My guess is that DISTINCT mos_content.catid takes far longer to figure out than DISTINCT mos_categories.id does. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Sep 26, 2013 at 11:28 Alexander Yancharuk 14.6k55 gold badges5858 silver badges5656 bronze badges answered Oct 20, 2011 at 22:27 JasonJason 17711 silver badge33 bronze badges 2 1 i'd like to know more about what you are trying to point out in the last line \"My guess is that DISTINCT mos_content.catid takes far longer to figure out than DISTINCT mos_categories.id does.\" . Are you saying that an id should be named only id and not named something like catid ? Trying to optimize my db accesses, and your learnings could help. – bool.dev Commented Oct 21, 2011 at 7:54 2 using SQL IN in that case is a bad practice and it doesn't prove anything. – Uğur Gümüşhan Commented Feb 14, 2013 at 16:04 Add a comment | This answer is useful 16 Save this answer. Show activity on this post. Subqueries are generally used to return a single row as an atomic value, though they may be used to compare values against multiple rows with the IN keyword. They are allowed at nearly any meaningful point in a SQL statement, including the target list, the WHERE clause, and so on. A simple sub-query could be used as a search condition. For example, between a pair of tables: sql SELECT title FROM books WHERE author_id = ( SELECT id FROM authors WHERE last_name = 'Bar' AND first_name = 'Foo' ); Note that using a normal value operator on the results of a sub-query requires that only one field must be returned. If you're interested in checking for the existence of a single value within a set of other values, use IN: sql SELECT title FROM books WHERE author_id IN ( SELECT id FROM authors WHERE last_name ~ '^[A-E]' ); This is obviously different from say a LEFT-JOIN where you just want to join stuff from table A and B even if the join-condition doesn't find any matching record in table B, etc. If you're just worried about speed you'll have to check with your database and write a good query and see if there's any significant difference in performance. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited Nov 26, 2020 at 10:59 Slava Rozhnev 10.2k66 gold badges2626 silver badges4242 bronze badges answered Apr 5, 2010 at 6:34 rkullarkulla 2,52411 gold badge1818 silver badges1616 bronze badges Add a comment | This answer is useful 12 Save this answer. Show activity on this post. MySQL version: 5.5.28-0ubuntu0.12.04.2-log I was also under the impression that JOIN is always better than a sub-query in MySQL, but EXPLAIN is a better way to make a judgment. Here is an example where sub queries work better than JOINs. Here is my query with 3 sub-queries: sql EXPLAIN SELECT vrl.list_id,vrl.ontology_id,vrl.position,l.name AS list_name, vrlih.position AS previous_position, vrl.moved_date FROM `vote-ranked-listory` vrl INNER JOIN lists l ON l.list_id = vrl.list_id INNER JOIN `vote-ranked-list-item-history` vrlih ON vrl.list_id = vrlih.list_id AND vrl.ontology_id=vrlih.ontology_id AND vrlih.type='PREVIOUS_POSITION' INNER JOIN list_burial_state lbs ON lbs.list_id = vrl.list_id AND lbs.burial_score < 0.5 WHERE vrl.position <= 15 AND l.status='ACTIVE' AND l.is_public=1 AND vrl.ontology_id < 1000000000 AND (SELECT list_id FROM list_tag WHERE list_id=l.list_id AND tag_id=43) IS NULL AND (SELECT list_id FROM list_tag WHERE list_id=l.list_id AND tag_id=55) IS NULL AND (SELECT list_id FROM list_tag WHERE list_id=l.list_id AND tag_id=246403) IS NOT NULL ORDER BY vrl.moved_date DESC LIMIT 200; EXPLAIN shows: sql +----+--------------------+----------+--------+-----------------------------------------------------+--------------+---------+-------------------------------------------------+------+--------------------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+--------------------+----------+--------+-----------------------------------------------------+--------------+---------+-------------------------------------------------+------+--------------------------+ | 1 | PRIMARY | vrl | index | PRIMARY | moved_date | 8 | NULL | 200 | Using where | | 1 | PRIMARY | l | eq_ref | PRIMARY,status,ispublic,idx_lookup,is_public_status | PRIMARY | 4 | ranker.vrl.list_id | 1 | Using where | | 1 | PRIMARY | vrlih | eq_ref | PRIMARY | PRIMARY | 9 | ranker.vrl.list_id,ranker.vrl.ontology_id,const | 1 | Using where | | 1 | PRIMARY | lbs | eq_ref | PRIMARY,idx_list_burial_state,burial_score | PRIMARY | 4 | ranker.vrl.list_id | 1 | Using where | | 4 | DEPENDENT SUBQUERY | list_tag | ref | list_tag_key,list_id,tag_id | list_tag_key | 9 | ranker.l.list_id,const | 1 | Using where; Using index | | 3 | DEPENDENT SUBQUERY | list_tag | ref | list_tag_key,list_id,tag_id | list_tag_key | 9 | ranker.l.list_id,const | 1 | Using where; Using index | | 2 | DEPENDENT SUBQUERY | list_tag | ref | list_tag_key,list_id,tag_id | list_tag_key | 9 | ranker.l.list_id,const | 1 | Using where; Using index | +----+--------------------+----------+--------+-----------------------------------------------------+--------------+---------+-------------------------------------------------+------+--------------------------+ The same query with JOINs is: sql EXPLAIN SELECT vrl.list_id,vrl.ontology_id,vrl.position,l.name AS list_name, vrlih.position AS previous_position, vrl.moved_date FROM `vote-ranked-listory` vrl INNER JOIN lists l ON l.list_id = vrl.list_id INNER JOIN `vote-ranked-list-item-history` vrlih ON vrl.list_id = vrlih.list_id AND vrl.ontology_id=vrlih.ontology_id AND vrlih.type='PREVIOUS_POSITION' INNER JOIN list_burial_state lbs ON lbs.list_id = vrl.list_id AND lbs.burial_score < 0.5 LEFT JOIN list_tag lt1 ON lt1.list_id = vrl.list_id AND lt1.tag_id = 43 LEFT JOIN list_tag lt2 ON lt2.list_id = vrl.list_id AND lt2.tag_id = 55 INNER JOIN list_tag lt3 ON lt3.list_id = vrl.list_id AND lt3.tag_id = 246403 WHERE vrl.position <= 15 AND l.status='ACTIVE' AND l.is_public=1 AND vrl.ontology_id < 1000000000 AND lt1.list_id IS NULL AND lt2.tag_id IS NULL ORDER BY vrl.moved_date DESC LIMIT 200; and the output is: sql +----+-------------+-------+--------+-----------------------------------------------------+--------------+---------+---------------------------------------------+------+----------------------------------------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra | +----+-------------+-------+--------+-----------------------------------------------------+--------------+---------+---------------------------------------------+------+----------------------------------------------+ | 1 | SIMPLE | lt3 | ref | list_tag_key,list_id,tag_id | tag_id | 5 | const | 2386 | Using where; Using temporary; Using filesort | | 1 | SIMPLE | l | eq_ref | PRIMARY,status,ispublic,idx_lookup,is_public_status | PRIMARY | 4 | ranker.lt3.list_id | 1 | Using where | | 1 | SIMPLE | vrlih | ref | PRIMARY | PRIMARY | 4 | ranker.lt3.list_id | 103 | Using where | | 1 | SIMPLE | vrl | ref | PRIMARY | PRIMARY | 8 | ranker.lt3.list_id,ranker.vrlih.ontology_id | 65 | Using where | | 1 | SIMPLE | lt1 | ref | list_tag_key,list_id,tag_id | list_tag_key | 9 | ranker.lt3.list_id,const | 1 | Using where; Using index; Not exists | | 1 | SIMPLE | lbs | eq_ref | PRIMARY,idx_list_burial_state,burial_score | PRIMARY | 4 | ranker.vrl.list_id | 1 | Using where | | 1 | SIMPLE | lt2 | ref | list_tag_key,list_id,tag_id | list_tag_key | 9 | ranker.lt3.list_id,const | 1 | Using where; Using index | +----+-------------+-------+--------+-----------------------------------------------------+--------------+---------+---------------------------------------------+------+----------------------------------------------+ A comparison of the rows column tells the difference and the query with JOINs is using Using temporary; Using filesort. Of course when I run both the queries, the first one is done in 0.02 secs, the second one does not complete even after 1 min, so EXPLAIN explained these queries properly. If I do not have the INNER JOIN on the list_tag table i.e. if I remove sql AND (SELECT list_id FROM list_tag WHERE list_id=l.list_id AND tag_id=246403) IS NOT NULL from the first query and correspondingly: sql INNER JOIN list_tag lt3 ON lt3.list_id = vrl.list_id AND lt3.tag_id = 246403 from the second query, then EXPLAIN returns the same number of rows for both queries and both these queries run equally fast. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Jun 6, 2013 at 19:38 answered Jun 6, 2013 at 18:25 arunarun 11k77 gold badges6666 silver badges8484 bronze badges 1 In Oracle or PostgreSQL I would have tried: AND NOT EXISTS (SELECT 1 FROM list_tag WHERE list_id=l.list_id AND tag_id in (43, 55, 246403)) – David Aldridge Commented May 6, 2015 at 20:55 Add a comment | This answer is useful 10 Save this answer. Show activity on this post. Subqueries have ability to calculate aggregation functions on a fly. E.g. Find minimal price of the book and get all books which are sold with this price. 1) Using Subqueries: sql SELECT titles, price FROM Books, Orders WHERE price = (SELECT MIN(price) FROM Orders) AND (Books.ID=Orders.ID); 2) using JOINs ```sql SELECT MIN(price) FROM Orders; 2.99 SELECT titles, price FROM Books b INNER JOIN Orders o ON b.ID = o.ID WHERE o.price = 2.99; ``` Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Jun 17, 2015 at 12:58 answered Jun 17, 2015 at 7:24 VolodymyrVolodymyr 1,4422525 silver badges4444 bronze badges 3 Another case: multiple GROUP BYs with different tables: stackoverflow.com/questions/11415284/… Subqueries seem to be strictly more general. See also the MySQL man: dev.mysql.com/doc/refman/5.7/en/optimizing-subqueries.html | dev.mysql.com/doc/refman/5.7/en/rewriting-subqueries.html – Ciro Santilli OurBigBook.com Commented Jun 12, 2016 at 22:24 7 -1 This is misleading as you're using a subquery and join in both examples. That you've pulled the subquery out into a second query to determine the lowest order price has no effect since the database will do the exact same thing. Plus, you're not rewriting the join using a subquery; both queries use a join. You are correct that subqueries allow aggregate functions, but this example doesn't demonstrate that fact. – David Harkness Commented Aug 1, 2016 at 23:53 I agree with David, and you can use group by to get the minimum price. – user1735921 Commented Dec 8, 2017 at 6:36 Add a comment | This answer is useful 4 Save this answer. Show activity on this post. The difference is only seen when the second joining table has significantly more data than the primary table. I had an experience like below... We had a users table of one hundred thousand entries and their membership data (friendship) about 3 hundred thousand entries. It was a join statement in order to take friends and their data, but with a great delay. But it was working fine where there was only a small amount of data in the membership table. Once we changed it to use a sub-query it worked fine. But in the mean time the join queries are working with other tables that have fewer entries than the primary table. So I think the join and sub query statements are working fine and it depends on the data and the situation. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Jun 16, 2014 at 8:12 Duncan Babbage 20.2k44 gold badges5959 silver badges9494 bronze badges answered Mar 10, 2014 at 10:42 jpkjpk 18944 silver badges1313 bronze badges Add a comment | This answer is useful 3 Save this answer. Show activity on this post. These days, many dbs can optimize subqueries and joins. Thus, you just gotto examine your query using explain and see which one is faster. If there is not much difference in performance, I prefer to use subquery as they are simple and easier to understand. Share Share a link to this answer Copy linkCC BY-SA 3.0 Improve this answer Follow Follow this answer to receive notifications edited Apr 22, 2014 at 8:06 broadband 3,49877 gold badges4848 silver badges7878 bronze badges answered Feb 2, 2012 at 18:25 Eun Woo SongEun Woo Song 74066 silver badges88 bronze badges Add a comment | This answer is useful 2 Save this answer. Show activity on this post. I am not a relational database expert, so take this with a grain of salt. The general idea about sub queries vs joins is the path the evaluation of the larger query takes. In order to perform the larger query, every individual subquery has to be executed first, and then the resultset is stored as a temporary table that the larger query interacts with. This temporary table is unindexed, so, any comparison requires scanning the whole resultset. In contrast, when you use a join, all indexes are in use and so, comparison require traversing index trees (or hash tables), which is way less expensive in terms of speed. Now, what I don't know if newer versions of the most popular relational engines execute the evaluation on reverse, and just load the necessary elements in the temporary table, as an optimization method. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications edited Aug 23, 2021 at 21:09 Dharman♦ 33.4k2727 gold badges101101 silver badges147147 bronze badges answered Aug 23, 2021 at 21:04 TormatoTormato 12111 silver badge44 bronze badges Add a comment | This answer is useful 1 Save this answer. Show activity on this post. I just thinking about the same problem, but I am using subquery in the FROM part. I need connect and query from large tables, the \"slave\" table have 28 million record but the result is only 128 so small result big data! I am using MAX() function on it. First I am using LEFT JOIN because I think that is the correct way, the mysql can optimalize etc. Second time just for testing, I rewrite to sub-select against the JOIN. LEFT JOIN runtime: 1.12s SUB-SELECT runtime: 0.06s 18 times faster the subselect than the join! Just in the chokito adv. The subselect looks terrible but the result ... Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications answered Sep 23, 2018 at 9:04 Karoly SzaboKaroly Szabo 1111 bronze badge Add a comment | This answer is useful 1 Save this answer. Show activity on this post. It depends on several factors, including the specific query you're running, the amount of data in your database. Subquery runs the internal queries first and then from the result set again filter out the actual results. Whereas in join runs the and produces the result in one go. The best strategy is that you should test both the join solution and the subquery solution to get the optimized solution. Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications answered Sep 12, 2020 at 19:15 AyeshaAyesha 744 bronze badges Add a comment | This answer is useful -2 Save this answer. Show activity on this post. If you want to speed up your query using join: For \"inner join/join\", Don't use where condition instead use it in \"ON\" condition. Eg: ```sql select id,name from table1 a join table2 b on a.name=b.name where id='123' Try, select id,name from table1 a join table2 b on a.name=b.name and a.id='123' ``` For \"Left/Right Join\", Don't use in \"ON\" condition, Because if you use left/right join it will get all rows for any one table.So, No use of using it in \"On\". So, Try to use \"Where\" condition Share Share a link to this answer Copy linkCC BY-SA 4.0 Improve this answer Follow Follow this answer to receive notifications answered Apr 24, 2019 at 12:25 sam rubensam ruben 38533 silver badges66 bronze badges 1 2 This depends on the SQL server and on the complexity of the query. A lot of SQL implementations would optimize simple queries like this for the best performance. Perhaps provide an example server name and version where this behavior happens to improve the answer? – Trendfischer Commented May 26, 2020 at 17:49 Add a comment | Highly active question. Earn 10 reputation (not counting the association bonus) in order to answer this question. The reputation requirement helps protect this question from spam and non-answer activity. Start asking to get answers Find the answer to your question by asking. Ask question Explore related questions sql mysql subquery join See similar questions with these tags. The Overflow Blog Improving error monitoring with AI WBIT #5: Building a framework to lure web devs to mobile Featured on Meta Community Asks Sprint Announcement - March 2025 Experimenting with a new experiment opt-out option Stacks Editor development and testing Policy: Generative AI (e.g., ChatGPT) is banned Is it better to redirect users who attempt to perform actions they can't yet... Report this ad Report this ad Linked 3What is difference between JOINS and SUBQUERIES?Can anything we can do with joins can be done with subqueries also or vice-versa? 6SQL Performance using JOIN instead of IN CLAUSE 2Is nested query faster than join query? 1'join' or 'where not in()'? 1Between these two SQL queries, is one of them 'correct'? -1Subqueries vs join in mysql -1DIfference between inline query in select clause and a join in where clause 0Efficient MySql Query 960How to Join to first row 164Subqueries vs joins See more linked questions Related 1sub query or join? 0Sub query or Join which is the optimal solution? 1mySQL joins or subquery 3Should this SELECT use a join or a subquery? 3MySQL using select with 2 queries, subquery or join? 2MYSQL SubQuery vs Join - both not good for me 0Subquery or INNER JOIN? 0Use Join or Sub Query? 2SQL Join vs Sub-query 0Mysql : using Join instead of subQuery Hot Network Questions Was the town of Zdanice ever surrounded by water? Sci-fi movie that predates The Matrix but shares themes What happens if Flixbus doesn't assign a seat on the ticket? What happens if I choose to pay Vik back or not? Why are Chess.com calling for the Bishop to be renamed? How \"Random\" node actually works? Can I use the same wooden cutting board for vegetables and meat if I cut the vegetables first? Ethernet over double RJ11 In an elastic collision of two balls of same unitary mass do they scatter at 0 or 90 degrees? A tree of polymorphic types (Crafting Interpreters Book) How to improve EMI/EMC performance of a buck DCDC converter? Laptop's internal microphone gets detected, but does not record anything Visiting the US for independent research with ESTA Is there a difference between sleeping and death according to Jesus? Why are the space below `h`/`t`-floats different? Validity of presidential orders \"signed\" with an \"autopen\" machine Do \"dessen\" and \"deren\" mean the \"latter's\"? A surprisingly difficult fact about bilinear maps Options to rectify pre-fab board with swapped pin positions What is the benefit of vocalizing when casting a spell rather than doing it silently? What determines the width of a rainbow? Do pentesters need to be able to fix their findings for their customers? How to make the weather matter? Playing an HTML5 game from itch.io offline Question feed Subscribe to RSS Question feedTo subscribe to this RSS feed, copy and paste this URL into your RSS reader. lang-sql Stack Overflow Questions Help Chat Products Teams Advertising Talent Company About Press Work Here Legal Privacy Policy Terms of Service Contact Us Your Privacy Choices Cookie Policy Stack Exchange Network Technology Culture & recreation Life & arts Science Professional Business API Data Blog Facebook Twitter LinkedIn Instagram Site design / logo © 2025 Stack Exchange Inc; user contributions licensed under CC BY-SA . rev 2025.3.19.24110 By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy. Accept all cookies Necessary cookies only Customize settings",
      "title": "https://stackoverflow.com/questions/2577174/join-vs-sub-query"
    },
    {
      "url": "https://adamtlee.medium.com/sql-subqueries-vs-join-9bcb921a5b2e",
      "content": "SQL: Subqueries vs JOIN. Subqueries and joins are two important… | by adam lee | Medium Open in app Sign up Sign in Write Sign up Sign in SQL: Subqueries vs JOIN adam lee ·Follow 4 min read · Dec 18, 2022 -- Listen Share Subqueries and joins are two important concepts in SQL, the standard programming language for managing and manipulating databases. In this blog, we will explore what subqueries and joins are, how they differ, and when to use each one in your SQL queries. What are Subqueries? A subquery is a query within a query. It is a way to nest a SELECT statement inside another SELECT, INSERT, UPDATE, or DELETE statement, or inside a CREATE VIEW statement. Subqueries can be used to perform a variety of tasks, such as: Filtering rows based on a condition Calculating values for use in the outer query Returning a single value or multiple values as part of the outer query What are Joins? A join is a way to combine rows from two or more tables based on a related column between them. There are several types of joins, including INNER JOIN, OUTER JOIN, and CROSS JOIN. An INNER JOIN returns only the rows that match the join condition. An OUTER JOIN returns all rows from both tables, including the ones that don’t match the join condition. There are two types of outer joins: LEFT JOIN and RIGHT JOIN. A LEFT JOIN returns all rows from the left table (the first table in the query) and any matching rows from the right table. A RIGHT JOIN returns all rows from the right table (the second table in the query) and any matching rows from the left table. A CROSS JOIN returns the Cartesian product of the two tables, which is a combination of all rows from both tables. Practical Example: In this scenario, we have a Hogwarts database and the following tables are listed below: course_table: This table contains data regarding course names and is identified using a unique primary key student_table: This table contains data regarding student names that are identified by a unique primary key enrollment_table: This table is the JOIN table that establishes the relationship between students and courses. Each time a student enrolls in a course a new record is created. the course_id is the foreign key to identify a course from the course_table, and the student_id is a foreign key to identify a student from the student_table. course: +─────+────────────────────────────────+ | id | course | +─────+────────────────────────────────+ | 1 | Defense against the dark arts | | 2 | Potions | | 3 | History of magic | +─────+────────────────────────────────+ student: +─────+────────────────────────────────+ | id | student | +─────+────────────────────────────────+ | 1 | Harry Potter | | 2 | Hermione Granger | | 3 | Ron Weasly | | 4 | Voldemort | | 5 | Draco Malfoy | +─────+────────────────────────────────+ enrollment: +─────+────────────+─────────────+ | id | course_id | student_id | +─────+────────────+─────────────+ | 1 | 1 | 1 | | 2 | 2 | 1 | | 3 | 3 | 2 | | 4 | 2 | 3 | | 5 | 3 | 4 | | 6 | 1 | 5 | | 7 | 3 | 1 | | 8 | 1 | 4 | +─────+────────────+─────────────+ Now, what if we wanted to find the number of students enrolled in a particular course like Defense against the dark arts? we could use 2 following options, a Subquery, or a Join Subqueries Listed below is an example of the Subquery approach. SELECT * FROM enrollment WHERE enrollment.course_id IN (SELECT * FROM courses WHERE course_id = 1); The subquery approach has a nested select statement within the query and sends 2 passes to the database. JOIN Listed below is the Join approach. SELECT * FROM course AS c LEFT JOIN enrollment AS e ON c.id = e.course_id WHERE e.course_id = 1 The join approach only uses 1 pass to the database. Left joining the enrollment table with aliases as seen above. When to Use Subqueries and Joins Subqueries and joins can both be used to retrieve data from multiple tables, but they have different use cases. Subqueries are generally used when you want to use the results of the inner query in the WHERE or HAVING clause of the outer query. They are also useful when you want to return a single value or multiple values as part of the outer query. Joins are generally used when you want to retrieve data from multiple tables based on a related column between them. They are also useful when you want to return all rows from both tables, including the ones that don’t match the join condition. In general, subqueries tend to be more efficient when you only need to return a few rows, while joins are more efficient when you need to return a large number of rows. However, the performance difference between the two can vary depending on the size of the tables and the complexity of the queries. In conclusion, subqueries and joins are two important tools for retrieving data from multiple tables in SQL. Subqueries are useful for filtering rows and returning values as part of the outer query, while joins are useful for combining rows from multiple tables based on a related column. Both can be used to achieve similar goals, but the choice of which one to use depends on the specific requirements of your query. Sign up to discover human stories that deepen your understanding of the world. Free Distraction-free reading. No ads. Organize your knowledge with lists and highlights. Tell your story. Find your audience. Sign up for free Membership Read member-only stories Support writers you read most Earn money for your writing Listen to audio narrations Read offline with the Medium app Try for $5/month Software Development Software Engineering Sql Technology Computer Science -- -- Follow Written by adam lee ------------------- 47 Followers ·68 Following I'm a martial artist and software engineer. I enjoy writing about Martial Arts, Personal Development, Technology, and Travel. Follow No responses yet What are your thoughts? Also publish to my profile Respond Respond Help Status About Careers Press Blog Privacy Terms Text to speech Teams",
      "title": "https://adamtlee.medium.com/sql-subqueries-vs-join-9bcb921a5b2e"
    }
  ],
  "researchSummary": "Source: https://www.sqlservercentral.com/blogs/master-sql-subqueries-with-this-free-course\nContent: Master SQL Subqueries with This Free Course – SQLServerCentral Articles Editorials Stairways Forums Forums home Active threads Latest topics Most popular Leaderboard * Scripts * QotD * Books * Blogs Register Login Write for us Menu Articles Editorials Stairways Forums Forums home Active threads Latest topics Most popular Leaderboard * Scripts * QotD * Books * Blogs * Write for us * Register * Login Master SQL Subqueries with This Free Course Tracy McKibben, 2025-01-10 Want to boost your SQL game\n\nSource: https://learnsql.com/blog/best-online-sql-courses/\nContent: SQL Courses Online Learn SQL for managing databases. Understand how to write queries, manage data, and optimize database performance. Filter by SubjectRequiredâ* LanguageRequiredâ* The language used throughout the course, in both instruction and assessments. Learning ProductRequiredâ* LevelRequiredâ* DurationRequiredâ* SkillsRequiredâ* SubtitlesRequiredâ* EducatorRequiredâ* Explore the SQL Course Catalog IBM Databases and SQL for Data Science with Python Skills you'll gain: SQL, \n\nSource: https://medium.com/learning-sql/mastering-subqueries-in-sql-a-comprehensive-guide-cc584de5128a\nContent: Published Time: 2024-05-15T17:49:01.963Z Mastering Subqueries in SQL: A Comprehensive Guide | by Karan | Learning SQL | Medium Open in app Sign up Sign in Write Sign up Sign in HomeLibrary StoriesStats Learning SQL ---------------- HomeAbout ·Follow publication Focused on helping you learn SQL Follow publication Mastering Subqueries in SQL: A Comprehensive Guide Karan ·Follow Published in Learning SQL · 5 min read · May 15, 2024 23 Listen Share Photo by The Dark Queen on Unsplash Structured Quer\n\nSource: https://www.sqlrevisited.com/2024/01/top-10-websites-to-learn-sql-for-free.html\nContent: Sign up Sign in Sign up Sign in Home Library Stories Stats Javarevisited Home Newsletter About A humble place to learn Java and Programming better. 10 Best Places to Learn SQL Online for FREE My favorite websites to learn SQL Query and Database fundamentals online like SQLZoo, SQLBolt, Khan Academy and Udemy javinpaul Follow Javarevisited -- 5 Listen Share Hello guys, if you want to learn SQL in depth and are looking for the best free resources like websites, books, and online courses, you have \n\nSource: https://www.codecademy.com/learn/learn-sql\nContent: Learn SQL | Codecademy Skip to Content Loading menu bar Loading menu bar Search Free Course Learn SQL In this SQL course, you’ll learn how to manage large datasets and analyze real data using the standard data management language. 4.6 20,915 ratings This course includes AI assistance for guided coding help Projects to apply new skills Quizzes to test your knowledge A certificate of completion Start 1,031,107 learners enrolled This course includes AI assistance for guided coding help Projects to \n\nSource: https://rivery.io/blog/6-best-free-resources-for-learning-sql/\nContent: 9 Best Resources To Learn SQL For Free (2025) | Rivery Product Product Overview Your complete data stack solution Get started for free Data Ingestion Connect to any source in minutes Data Orchestration Automate, optimize, and manage your data flow from start to finish Rivery Copilot AI Build Data Pipelines Faster with GenAI Data Transformation Turn raw data into business data models DataOps Management Scale your DataOps from start to finish CDC Replication Replicate your database to a cloud data\n\nSource: https://stackoverflow.com/questions/2577174/join-vs-sub-query\nContent: sql - Join vs. sub-query - Stack Overflow Join Stack Overflow ============================================================================================================================= By clicking “Sign up”, you agree to our terms of service and acknowledge you have read our privacy policy. Sign up with Google Sign up with GitHub OR Email Password Sign up Already have an account? Log in Skip to main content Stack Overflow About Products OverflowAI Stack Overflow for Teams Where developers & t\n\nSource: https://adamtlee.medium.com/sql-subqueries-vs-join-9bcb921a5b2e\nContent: SQL: Subqueries vs JOIN. Subqueries and joins are two important… | by adam lee | Medium Open in app Sign up Sign in Write Sign up Sign in SQL: Subqueries vs JOIN adam lee ·Follow 4 min read · Dec 18, 2022 -- Listen Share Subqueries and joins are two important concepts in SQL, the standard programming language for managing and manipulating databases. In this blog, we will explore what subqueries and joins are, how they differ, and when to use each one in your SQL queries. What are Subqueries? A s",
  "coreTopic": "SQL Tutorials and Concepts",
  "brandInfo": "transcript study - Unlock a smarter way to study with our AI-drive suite of powerful learning tools. - Taglines: None",
  "youtubeVideo": "https://www.youtube.com/watch?v=HXV3zeQKqGY",
  "internalLinks": [
    "The provided content does not contain any internal links. It mentions a website (SQLTutorial.org) and discusses general content about SQL subqueries",
    "but no specific internal links or URLs are included within the text. If you have more text or content",
    "please share it",
    "and I can help extract internal links from that."
  ],
  "references": [
    "https://www.sqlservercentral.com/blogs/master-sql-subqueries-with-this-free-course",
    "https://learnsql.com/blog/best-online-sql-courses/",
    "https://medium.com/learning-sql/mastering-subqueries-in-sql-a-comprehensive-guide-cc584de5128a",
    "https://www.sqlrevisited.com/2024/01/top-10-websites-to-learn-sql-for-free.html",
    "https://www.codecademy.com/learn/learn-sql",
    "https://rivery.io/blog/6-best-free-resources-for-learning-sql/",
    "https://stackoverflow.com/questions/2577174/join-vs-sub-query",
    "https://adamtlee.medium.com/sql-subqueries-vs-join-9bcb921a5b2e",
    "https://medium.com/@sanjuktabaruah5/sql-joins-vs-subqueries-a-comprehensive-comparison-039e6f4686a5",
    "https://stackoverflow.com/questions/4799820/when-to-use-sql-sub-queries-versus-a-standard-join",
    "https://www.adventuresinmachinelearning.com/subqueries-vs-joins-boosting-sql-query-performance-and-efficiency/",
    "https://medium.com/learning-sql/12-tips-for-optimizing-sql-queries-for-faster-performance-8c6c092d7af1",
    "https://www.scaler.com/topics/sql/types-of-subqueries-in-sql/",
    "https://hightouch.com/sql-dictionary/sql-subqueries",
    "https://stackoverflow.com/questions/3856164/which-of-the-join-and-subquery-queries-would-be-faster-and-why-when-i-should-pr"
  ],
  "existingPosts": "\"Study Smarter, Not Harder: 2025 Hacks for A+ Students!\", \"Quit the Chaos: Get Your Study Notes in Line, Bro!\", \"Hey Educators! Dive Into NASA's Space Gear for Grades 5-8!\"",
  "targetKeywords": [],
  "timestamp": "2025-03-19",
  "nudge": "7n343",
  "extractedKeywords": []
}